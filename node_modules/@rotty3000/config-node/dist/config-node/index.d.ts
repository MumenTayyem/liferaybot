import { ConfigProvider } from './types';
import { computeIfAbsent, setVerbose } from './util';
/**
 * Register one or more configuration providers.
 *
 * @param providers: ConfigProvider[] - the providers
 */
declare function addProvider(...providers: ConfigProvider[]): void;
/**
 * A utility function to flush all the caches. (This is a hammer and should not generally be used. It's mostly useful un testing new provider implementations.)
 */
declare function clearCache(): void;
/**
 * A utility function to set a default configuration value programmatically.
 *
 * @param key - the key under which to store the value
 * @param value - the configuration value to store
 */
declare function defaultConfig(key: string, value: any): void;
/**
 * This function attempts to find a value for the given key which is looked up from the set of registered providers. This function is the workhorse of this API and is the main entrypoint for developers.
 * @param key - the key to be looked up
 * @returns a value which can be a string, a string[] or undefined
 */
declare function lookupConfig(key: string): string | string[] | undefined;
export { addProvider, clearCache, computeIfAbsent, ConfigProvider, defaultConfig, lookupConfig, setVerbose };
