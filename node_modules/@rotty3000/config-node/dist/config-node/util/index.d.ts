declare let verbose: boolean;
declare const protectedKeys: string[];
/**
 * A utility function to get the root folder of the parent project, use this function to get the application.json file
 * when it's packaged in the client extension files.
 * */
declare function getProjectRoot(): string;
/**
 * A utility function for providers that implements lazy computation of values when the cache does not contain the specified key.
 *
 * @param cache - the cache against which to lookup and store the value
 * @param key - the key to lookup and store the value under
 * @param fn - the function that will compute the value when no key is found in the cache
 * @returns the cached value (having been computed and added to the cache if absent when requested)
 */
declare function computeIfAbsent(cache: Map<string, any>, key: string, fn: () => any): any;
declare function readJSONFile(path: string): string;
/**
 * A utility function to enable verbose output from this library, convenient for debugging.
 *
 * @param b - verbose if true, false otherwise
 */
declare function setVerbose(b: boolean): void;
declare function unquote(it: any): any;
export { computeIfAbsent, getProjectRoot, protectedKeys, readJSONFile, setVerbose, verbose, unquote };
