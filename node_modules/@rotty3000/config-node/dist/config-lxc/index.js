"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lxcConfig = exports.OAuthApplicationProfile = void 0;
const config_node_1 = require("../config-node");
var OAuthApplicationProfile;
(function (OAuthApplicationProfile) {
    OAuthApplicationProfile[OAuthApplicationProfile["HEADLESS_SERVER"] = 0] = "HEADLESS_SERVER";
    OAuthApplicationProfile[OAuthApplicationProfile["USER_AGENT"] = 1] = "USER_AGENT";
})(OAuthApplicationProfile || (exports.OAuthApplicationProfile = OAuthApplicationProfile = {}));
const oauthApplications = new Map();
exports.lxcConfig = {
    dxpDomains: () => (0, config_node_1.lookupConfig)('com.liferay.lxc.dxp.domains').split('\n'),
    dxpMainDomain: () => {
        let value = (0, config_node_1.lookupConfig)('com.liferay.lxc.dxp.main.domain');
        if (!value) {
            value = (0, config_node_1.lookupConfig)('com.liferay.lxc.dxp.mainDomain');
        }
        return value;
    },
    dxpProtocol: () => (0, config_node_1.lookupConfig)('com.liferay.lxc.dxp.server.protocol'),
    oauthApplication: (erc) => {
        let oauthApplication = oauthApplications.get(erc);
        if (oauthApplication) {
            return oauthApplication;
        }
        let ercs = (0, config_node_1.lookupConfig)('liferay.oauth.application.external.reference.codes');
        if (ercs) {
            ercs = Array.isArray(ercs) ? ercs : [ercs];
        }
        if (ercs.includes(erc)) {
            let applicationType = OAuthApplicationProfile.USER_AGENT;
            if ((0, config_node_1.lookupConfig)(`${erc}.oauth2.headless.server.client.id`)) {
                applicationType = OAuthApplicationProfile.HEADLESS_SERVER;
            }
            oauthApplication = {
                applicationType,
                audience: () => (applicationType === OAuthApplicationProfile.HEADLESS_SERVER ?
                    (0, config_node_1.lookupConfig)(`${erc}.oauth2.headless.server.audience`) :
                    (0, config_node_1.lookupConfig)(`${erc}.oauth2.user.agent.audience`)),
                authorizationUri: () => (0, config_node_1.lookupConfig)(`${erc}.oauth2.authorization.uri`),
                clientId: () => (applicationType === OAuthApplicationProfile.HEADLESS_SERVER ?
                    (0, config_node_1.lookupConfig)(`${erc}.oauth2.headless.server.client.id`) :
                    (0, config_node_1.lookupConfig)(`${erc}.oauth2.user.agent.client.id`)),
                clientSecret: () => (0, config_node_1.lookupConfig)(`${erc}.oauth2.headless.server.client.secret`),
                introspectionUri: () => (0, config_node_1.lookupConfig)(`${erc}.oauth2.introspection.uri`),
                jwksUri: () => (0, config_node_1.lookupConfig)(`${erc}.oauth2.jwks.uri`),
                scopes: () => (applicationType === OAuthApplicationProfile.HEADLESS_SERVER ?
                    (0, config_node_1.lookupConfig)(`${erc}.oauth2.headless.server.scopes`) :
                    (0, config_node_1.lookupConfig)(`${erc}.oauth2.user.agent.scopes`)),
                tokenUri: () => (0, config_node_1.lookupConfig)(`${erc}.oauth2.token.uri`),
            };
            oauthApplications.set(erc, oauthApplication);
        }
        return oauthApplication;
    },
};
//# sourceMappingURL=index.js.map