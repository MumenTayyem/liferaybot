"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Item = Item;

var _provider = require("@clayui/provider");

var _shared = require("@clayui/shared");

var _react = _interopRequireWildcard(require("react"));

var _reactTransitionGroup = require("react-transition-group");

var _collection = require("../collection");

var _nav = require("../nav");

var _context = require("./context");

var _excluded = ["active", "children", "href", "index", "initialExpanded", "items", "keyValue", "onClick", "textValue"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function findSelectedNested(items) {
  return items.find(function (item) {
    if ('active' in item) {
      return true;
    }

    if ('items' in item) {
      return findSelectedNested(item['items']);
    }

    return false;
  });
}

var ParentContext = /*#__PURE__*/_react.default.createContext(null);

function Item(_ref) {
  var depreactedActive = _ref.active,
      children = _ref.children,
      href = _ref.href,
      _ = _ref.index,
      initialExpanded = _ref.initialExpanded,
      items = _ref.items,
      keyValue = _ref.keyValue,
      _onClick = _ref.onClick,
      _textValue = _ref.textValue,
      otherProps = _objectWithoutProperties(_ref, _excluded);

  var _useVertical = (0, _context.useVertical)(),
      activeKey = _useVertical.activeKey,
      _useVertical$ariaCurr = _useVertical.ariaCurrent,
      ariaCurrent = _useVertical$ariaCurr === void 0 ? 'page' : _useVertical$ariaCurr,
      childrenRoot = _useVertical.childrenRoot,
      close = _useVertical.close,
      expandedKeys = _useVertical.expandedKeys,
      firstKey = _useVertical.firstKey,
      open = _useVertical.open,
      spritemap = _useVertical.spritemap,
      toggle = _useVertical.toggle;

  var _useProvider = (0, _provider.useProvider)(),
      prefersReducedMotion = _useProvider.prefersReducedMotion;

  var itemRef = (0, _react.useRef)(null);
  var menusRef = (0, _react.useRef)(null);
  var parentItemRef = (0, _react.useContext)(ParentContext); // State only for compatibility with the old compositing version where state
  // was kept on each Item instead of centralized with `expandedKeys`.

  var _useState = (0, _react.useState)(initialExpanded),
      _useState2 = _slicedToArray(_useState, 2),
      expanded = _useState2[0],
      setExpanded = _useState2[1];

  var isOldVersion = typeof initialExpanded !== 'undefined';
  var isExpanded = isOldVersion ? expanded : expandedKeys.has(keyValue);
  var hasItemSelectedNested = (0, _react.useMemo)(function () {
    if (items) {
      return !!findSelectedNested(items);
    }

    return false;
  }, [items]);
  var active = depreactedActive !== null && depreactedActive !== void 0 ? depreactedActive : activeKey === keyValue;
  var ariaControlsId = (0, _shared.useId)();
  return /*#__PURE__*/_react.default.createElement(_nav.Nav.Item, _extends({
    role: "none"
  }, otherProps), /*#__PURE__*/_react.default.createElement(_nav.Nav.Link, {
    active: active,
    "aria-controls": items ? ariaControlsId : undefined,
    "aria-current": active ? ariaCurrent !== null && ariaCurrent !== void 0 ? ariaCurrent : undefined : undefined,
    "aria-expanded": items ? isExpanded : undefined,
    collapsed: !isExpanded,
    href: href,
    onClick: function onClick(event) {
      if (_onClick) {
        _onClick(event);
      }

      if (isOldVersion) {
        setExpanded(!expanded);
      } else {
        toggle(keyValue);
      }
    },
    onKeyDown: function onKeyDown(event) {
      switch (event.key) {
        case _shared.Keys.Right:
          {
            if (items && !isExpanded) {
              if (isOldVersion) {
                setExpanded(true);
              } else {
                open(keyValue);
              }
            } else if (items && menusRef.current) {
              var firstItemElement = menusRef.current.querySelector('.nav-link:not([disabled])');
              firstItemElement === null || firstItemElement === void 0 ? void 0 : firstItemElement.focus();
            }

            break;
          }

        case _shared.Keys.Left:
          {
            if (items && isExpanded) {
              if (isOldVersion) {
                setExpanded(false);
              } else {
                close(keyValue);
              }
            } else if (!items && parentItemRef) {
              var _parentItemRef$curren;

              (_parentItemRef$curren = parentItemRef.current) === null || _parentItemRef$curren === void 0 ? void 0 : _parentItemRef$curren.focus();
            }

            break;
          }

        default:
          break;
      }
    },
    ref: itemRef,
    role: "menuitem",
    showIcon: !!items,
    spritemap: spritemap,
    tabIndex: !active && !(hasItemSelectedNested && items && !isExpanded) && !(firstKey === keyValue && typeof activeKey === 'undefined') ? -1 : undefined
  }, children), items && /*#__PURE__*/_react.default.createElement(_reactTransitionGroup.CSSTransition, {
    className: isExpanded ? undefined : 'collapse',
    classNames: {
      enter: 'collapsing',
      enterActive: "show",
      enterDone: 'show',
      exit: "show",
      exitActive: 'collapsing'
    },
    in: isExpanded,
    onEnter: function onEnter(element) {
      return element.setAttribute('style', 'height: 0px');
    },
    onEntered: function onEntered(element) {
      return element.removeAttribute('style');
    },
    onEntering: function onEntering(element) {
      return (0, _shared.setElementFullHeight)(element);
    },
    onExit: function onExit(element) {
      return (0, _shared.setElementFullHeight)(element);
    },
    onExiting: function onExiting(element) {
      return element.setAttribute('style', 'height: 0px');
    },
    timeout: prefersReducedMotion ? 0 : 250,
    unmountOnExit: true
  }, /*#__PURE__*/_react.default.createElement(_nav.Nav, {
    id: ariaControlsId,
    ref: menusRef,
    role: "menu",
    stacked: true
  }, /*#__PURE__*/_react.default.createElement(ParentContext.Provider, {
    value: itemRef
  }, /*#__PURE__*/_react.default.createElement(_collection.Collection, {
    items: items,
    parentKey: keyValue
  }, childrenRoot.current)))));
}

Item.displayName = 'Item';