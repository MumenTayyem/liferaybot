"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VerticalNav = VerticalNav;

var _button = _interopRequireDefault(require("@clayui/button"));

var _icon = _interopRequireDefault(require("@clayui/icon"));

var _shared = require("@clayui/shared");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _collection = require("../collection");

var _nav = require("../nav");

var _Item = require("./Item");

var _context = require("./context");

var _excluded = ["children", "className"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Trigger = function Trigger(_ref) {
  var children = _ref.children,
      className = _ref.className,
      otherProps = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/_react.default.createElement(_button.default, _extends({
    className: (0, _classnames.default)(className, 'menubar-toggler'),
    displayType: "unstyled"
  }, otherProps), children);
};

function depthActive(items) {
  return items.find(function (item) {
    if (item['active']) {
      return true;
    }

    if ('items' in item) {
      return depthActive(item['items']);
    }

    return false;
  });
}

function VerticalNav(_ref2) {
  var _classNames;

  var active = _ref2.active,
      _ref2$activation = _ref2.activation,
      activation = _ref2$activation === void 0 ? 'manual' : _ref2$activation,
      children = _ref2.children,
      decorated = _ref2.decorated,
      _ref2$defaultExpanded = _ref2.defaultExpandedKeys,
      defaultExpandedKeys = _ref2$defaultExpanded === void 0 ? new Set() : _ref2$defaultExpanded,
      externalExpandedKeys = _ref2.expandedKeys,
      _ref2$itemAriaCurrent = _ref2.itemAriaCurrent,
      ariaCurrent = _ref2$itemAriaCurrent === void 0 ? true : _ref2$itemAriaCurrent,
      items = _ref2.items,
      large = _ref2.large,
      onExpandedChange = _ref2.onExpandedChange,
      spritemap = _ref2.spritemap,
      _ref2$trigger = _ref2.trigger,
      CustomTrigger = _ref2$trigger === void 0 ? Trigger : _ref2$trigger,
      _ref2$triggerLabel = _ref2.triggerLabel,
      triggerLabel = _ref2$triggerLabel === void 0 ? 'Menu' : _ref2$triggerLabel;

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      isOpen = _useState2[0],
      setIsOpen = _useState2[1];

  var containerRef = (0, _react.useRef)(null);

  var _useControlledState = (0, _shared.useControlledState)({
    defaultName: 'defaultExpandedKeys',
    defaultValue: defaultExpandedKeys,
    handleName: 'onExpandedChange',
    name: 'expandedKeys',
    onChange: onExpandedChange,
    value: externalExpandedKeys
  }),
      _useControlledState2 = _slicedToArray(_useControlledState, 2),
      expandedKeys = _useControlledState2[0],
      setExpandedKeys = _useControlledState2[1];

  var toggle = (0, _react.useCallback)(function (key) {
    var expanded = new Set(expandedKeys);

    if (expanded.has(key)) {
      expanded.delete(key);
    } else {
      expanded.add(key);
    }

    setExpandedKeys(expanded);
  }, [expandedKeys]);
  var close = (0, _react.useCallback)(function (key) {
    var expanded = new Set(expandedKeys);

    if (expanded.has(key)) {
      expanded.delete(key);
      setExpandedKeys(expanded);
      return true;
    }

    return false;
  }, [expandedKeys]);
  var open = (0, _react.useCallback)(function (key) {
    var expanded = new Set(expandedKeys);

    if (!expanded.has(key)) {
      expanded.add(key);
      setExpandedKeys(expanded);
      return true;
    }

    return false;
  }, [expandedKeys]);
  var childrenRootRef = (0, _react.useRef)(children);

  var _useNavigation = (0, _shared.useNavigation)({
    activation: activation,
    containerRef: containerRef,
    orientation: 'vertical'
  }),
      navigationProps = _useNavigation.navigationProps;

  var collection = (0, _collection.useCollection)({
    children: children,
    // Avoid collection list is obsolete because we have collection nesting
    // which is not based on group primitive like Picker with groups
    // or DropDown.
    forceDeepRootUpdate: true,
    items: items,
    suppressTextValueWarning: false
  }); // Checks if the `active` property exists in the items tree to maintain
  // compatibility with the previous version.

  var hasDepthActive = (0, _react.useMemo)(function () {
    if (typeof active !== 'undefined' || !items) {
      return undefined;
    }

    return depthActive(items);
  }, [active, items]);
  return /*#__PURE__*/_react.default.createElement("nav", {
    className: (0, _classnames.default)('menubar menubar-transparent', (_classNames = {}, _defineProperty(_classNames, 'menubar-decorated', decorated), _defineProperty(_classNames, 'menubar-vertical-expand-lg', large), _defineProperty(_classNames, 'menubar-vertical-expand-md', !large), _classNames))
  }, /*#__PURE__*/_react.default.createElement(CustomTrigger, {
    onClick: function onClick() {
      return setIsOpen(!isOpen);
    }
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "inline-item inline-item-before"
  }, triggerLabel), /*#__PURE__*/_react.default.createElement(_icon.default, {
    focusable: "false",
    role: "presentation",
    spritemap: spritemap,
    symbol: "caret-bottom"
  })), /*#__PURE__*/_react.default.createElement("div", _extends({}, navigationProps, {
    className: (0, _classnames.default)('collapse menubar-collapse', {
      show: isOpen
    }),
    ref: containerRef
  }), /*#__PURE__*/_react.default.createElement(_nav.Nav, {
    "aria-orientation": "vertical",
    nested: true,
    role: "menubar"
  }, /*#__PURE__*/_react.default.createElement(_context.VerticalNavContext.Provider, {
    value: {
      activeKey: active && collection.hasItem(active) ? active : hasDepthActive ? null : undefined,
      ariaCurrent: ariaCurrent ? 'page' : null,
      childrenRoot: childrenRootRef,
      close: close,
      expandedKeys: expandedKeys,
      firstKey: collection.getFirstItem().key,
      open: open,
      spritemap: spritemap,
      toggle: toggle
    }
  }, /*#__PURE__*/_react.default.createElement(_collection.Collection, {
    collection: collection
  })))));
}

VerticalNav.Item = _Item.Item;
VerticalNav.Trigger = Trigger;