"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Row = void 0;

var _shared = require("@clayui/shared");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _aria = require("../aria");

var _collection = require("../collection");

var _hooks = require("../hooks");

var _Cell = require("./Cell");

var _context = require("./context");

var _excluded = ["_expandable", "_index", "_item", "_level", "_loc", "_size", "children", "className", "delimiter", "divider", "items", "keyValue", "lazy"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function RowInner(_ref, outRef) {
  var _classNames;

  var _expandable = _ref._expandable,
      _index = _ref._index,
      _item = _ref._item,
      _level = _ref._level,
      _loc = _ref._loc,
      _size = _ref._size,
      children = _ref.children,
      className = _ref.className,
      delimiter = _ref.delimiter,
      _ref$divider = _ref.divider,
      divider = _ref$divider === void 0 ? false : _ref$divider,
      items = _ref.items,
      keyValue = _ref.keyValue,
      _ref$lazy = _ref.lazy,
      lazy = _ref$lazy === void 0 ? false : _ref$lazy,
      otherProps = _objectWithoutProperties(_ref, _excluded);

  var _useTable = (0, _context.useTable)(),
      columnsVisibility = _useTable.columnsVisibility,
      expandedKeys = _useTable.expandedKeys,
      headCellsCount = _useTable.headCellsCount,
      onExpandedChange = _useTable.onExpandedChange,
      onLoadMore = _useTable.onLoadMore,
      treegrid = _useTable.treegrid,
      visibleColumns = _useTable.visibleColumns;

  var _useBody = (0, _context.useBody)(),
      insert = _useBody.insert;

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      isFocused = _useState2[0],
      setIsFocused = _useState2[1];

  var focusWithinProps = (0, _aria.useFocusWithin)({
    disabled: !treegrid,
    id: keyValue,
    onFocusChange: setIsFocused
  });

  var _useState3 = (0, _react.useState)(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isLoading = _useState4[0],
      setIsLoading = _useState4[1];

  var loadMore = (0, _react.useCallback)(function () {
    if (_expandable || !onLoadMore || !lazy) {
      return;
    }

    setIsLoading(true);
    onLoadMore(_item).then(function (items) {
      setIsLoading(false);

      if (!items) {
        return;
      }

      if (Array.isArray(items)) {
        insert([].concat(_toConsumableArray(_loc), [0]), items);
        var newExpandedKeys = new Set(expandedKeys);
        newExpandedKeys.add(keyValue);
        onExpandedChange(newExpandedKeys);
      }
    }).catch(function (error) {
      setIsLoading(false);
      console.error(error);
    });
  }, [insert, keyValue, _expandable, onLoadMore, lazy]);
  var ref = (0, _hooks.useForwardRef)(outRef);
  var visibleKeys = (0, _react.useMemo)(function () {
    // This is a speculation/inference about the size of items to decide
    // to render a last cell as an action.
    var count = items ? items.length : _react.default.Children.count(children);
    return [].concat(_toConsumableArray(Array.from(visibleColumns.values())), _toConsumableArray(columnsVisibility && count > visibleColumns.size ? [count - 1] : []));
  }, [columnsVisibility, items === null || items === void 0 ? void 0 : items.length, visibleColumns]);
  var collection = (0, _collection.useCollection)({
    children: children,
    items: items,
    visibleKeys: visibleKeys
  });
  return /*#__PURE__*/_react.default.createElement("tr", _extends({}, otherProps, focusWithinProps, {
    "aria-expanded": _expandable || lazy ? expandedKeys.has(keyValue) : undefined,
    "aria-level": treegrid ? _level : undefined,
    "aria-posinset": treegrid ? _index + 1 : undefined,
    "aria-setsize": treegrid ? _size : undefined,
    className: (0, _classnames.default)(className, (_classNames = {
      'table-divider': divider
    }, _defineProperty(_classNames, "table-row-".concat(delimiter), delimiter), _defineProperty(_classNames, 'table-focus', focusWithinProps.tabIndex === 0 && isFocused), _classNames)),
    "data-id": typeof keyValue === 'number' ? "number,".concat(keyValue) : "string,".concat(keyValue),
    onKeyDown: function onKeyDown(event) {
      if (document.activeElement !== ref.current || event.defaultPrevented || !_expandable && !lazy) {
        return;
      }

      switch (event.key) {
        case _shared.Keys.Left:
          {
            if (expandedKeys.has(keyValue)) {
              var newExpandedKeys = new Set(expandedKeys);
              newExpandedKeys.delete(keyValue);
              onExpandedChange(newExpandedKeys);
            }

            break;
          }

        case _shared.Keys.Right:
          {
            if (onLoadMore && lazy && !_expandable) {
              loadMore();
            } else {
              if (!expandedKeys.has(keyValue)) {
                var _newExpandedKeys = new Set(expandedKeys);

                _newExpandedKeys.add(keyValue);

                onExpandedChange(_newExpandedKeys);
              }
            }

            break;
          }

        default:
          break;
      }
    },
    ref: ref,
    role: treegrid ? 'row' : undefined
  }), /*#__PURE__*/_react.default.createElement(_context.RowContext.Provider, {
    value: {
      divider: divider,
      expandable: _expandable,
      isLoading: isLoading,
      key: keyValue,
      lazy: lazy,
      level: _level,
      loadMore: loadMore
    }
  }, /*#__PURE__*/_react.default.createElement(_collection.Collection, {
    collection: collection
  }), columnsVisibility && !divider && collection.getSize() === headCellsCount && /*#__PURE__*/_react.default.createElement(_Cell.Cell, {
    index: headCellsCount,
    keyValue: "".concat(keyValue, ":visibility")
  }, null)));
}

var Row = /*#__PURE__*/_react.default.forwardRef(RowInner);

exports.Row = Row;
Row.displayName = 'TableRow'; // @ts-ignore

Row.passthroughKey = true;