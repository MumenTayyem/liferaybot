"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTreeNavigation = useTreeNavigation;

var _shared = require("@clayui/shared");

var _react = require("react");

/**
 * SPDX-FileCopyrightText: Â© 2023 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: BSD-3-Clause
 */
function useTreeNavigation(_ref) {
  var disabled = _ref.disabled,
      locator = _ref.locator,
      ref = _ref.ref;
  var onKeyDownCapture = (0, _react.useCallback)(function (event) {
    if (![_shared.Keys.Left, _shared.Keys.Right, _shared.Keys.Up, _shared.Keys.Down, _shared.Keys.Home, _shared.Keys.End].includes(event.key) || disabled) {
      return;
    }

    var activeElement = document.activeElement;
    var isRow = activeElement.getAttribute('role') === locator.row;
    var item;

    switch (event.key) {
      case _shared.Keys.Up:
      case _shared.Keys.Down:
        {
          var items;

          if (isRow) {
            items = (0, _shared.getFocusableList)(ref, ["[role=\"".concat(locator.row, "\"]")]);
          } else {
            var colIndex = activeElement.getAttribute('aria-colindex');
            items = (0, _shared.getFocusableList)(ref, ["[aria-colindex=\"".concat(colIndex, "\"]")]);
          }

          var position = items.indexOf(activeElement);

          if (position === -1) {
            break;
          }

          item = items[event.key === _shared.Keys.Up ? position - 1 : position + 1];
          break;
        }

      case _shared.Keys.Left:
        {
          if (isRow) {
            if (activeElement.getAttribute('aria-expanded') !== 'true' && activeElement.getAttribute('aria-level') !== '1') {
              var _items = (0, _shared.getFocusableList)(ref, ["[role=\"".concat(locator.row, "\"]")]);

              var _position = _items.indexOf(activeElement);

              while (((_items$_position = _items[_position]) === null || _items$_position === void 0 ? void 0 : _items$_position.getAttribute('aria-level')) !== String(Number(activeElement.getAttribute('aria-level')) - 1)) {
                var _items$_position;

                _position -= 1;
              }

              item = _items[_position];
            }
          } else {
            var row = activeElement.closest("[role=\"".concat(locator.row, "\"]"));

            var _items2 = (0, _shared.getFocusableList)({
              current: row
            }, ["[role=\"".concat(locator.cell, "\"]")]);

            var _position2 = _items2.indexOf(activeElement);

            if (_position2 === -1) {
              break;
            }

            if (_position2 === 0) {
              item = row;
            } else {
              item = _items2[_position2 - 1];
            }
          }

          break;
        }

      case _shared.Keys.Right:
        {
          if (isRow) {
            if (activeElement.getAttribute('aria-expanded') !== 'false') {
              item = activeElement.querySelector("[role=\"".concat(locator.cell, "\"]"));
            }
          } else {
            var _row = activeElement.closest("[role=\"".concat(locator.row, "\"]"));

            var _items3 = (0, _shared.getFocusableList)({
              current: _row
            }, ["[role=\"".concat(locator.cell, "\"]")]);

            var _position3 = _items3.indexOf(activeElement);

            if (_position3 === -1) {
              break;
            }

            item = _items3[_position3 + 1];
          }

          break;
        }

      case _shared.Keys.Home:
      case _shared.Keys.End:
        {
          var _items4;

          if (isRow) {
            _items4 = (0, _shared.getFocusableList)(ref, ["[role=\"".concat(locator.row, "\"]")]);
          } else {
            var _row2 = activeElement.closest("[role=\"".concat(locator.row, "\"]"));

            _items4 = (0, _shared.getFocusableList)({
              current: _row2
            }, ["[role=\"".concat(locator.cell, "\"]")]);
          }

          item = _items4[event.key === _shared.Keys.Home ? 0 : _items4.length - 1];
          break;
        }

      default:
        {
          break;
        }
    }

    if (item) {
      event.preventDefault();
      item.focus();
    }
  }, [disabled]);
  return {
    navigationProps: {
      onKeyDownCapture: onKeyDownCapture
    }
  };
}