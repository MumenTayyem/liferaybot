/**
 * SPDX-FileCopyrightText: Â© 2023 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: BSD-3-Clause
 */
import RootTable from '@clayui/table';
import React from 'react';
import { Sorting } from './context';
export declare type Props = {
    /**
     * Defines the columns that are always visible and will be ignored by the
     * visible columns functionality.
     */
    alwaysVisibleColumns?: Set<React.Key>;
    /**
     * Flag to enable column visibility control.
     */
    columnsVisibility?: boolean;
    /**
     * Property to set the initial value of `expandedKeys` (uncontrolled).
     */
    defaultExpandedKeys?: Set<React.Key>;
    /**
     * Default state of sort (uncontrolled).
     */
    defaultSort?: Sorting | null;
    /**
     * Default value for visible columns in the table (uncontrolled).
     */
    defaultVisibleColumns?: Map<React.Key, number>;
    /**
     * The currently expanded keys in the collection (controlled).
     */
    expandedKeys?: Set<React.Key>;
    /**
     * Defines which columns are visible in the table (controlled).
     */
    visibleColumns?: Map<React.Key, number>;
    /**
     * Texts used for assertive messages to SRs.
     */
    messages?: {
        columnsVisibility: string;
        columnsVisibilityDescription: string;
        columnsVisibilityHeader: string;
        expandable: string;
        sortDescription: string;
        sorting: string;
    };
    /**
     * A callback that is called when items are expanded or collapsed
     * (controlled).
     */
    onExpandedChange?: (keys: Set<React.Key>) => void;
    /**
     * When a tree is very large, loading items (nodes) asynchronously is preferred to
     * decrease the initial payload and memory space. The callback is called every time
     * the item is a leaf node of the tree.
     */
    onLoadMore?: (item: unknown) => Promise<Array<any> | undefined>;
    /**
     * Callback for when the sorting change (controlled).
     */
    onSortChange?: (sorting: Sorting | null) => void;
    /**
     * Callback called when columns visibility changes (controlled).
     */
    onVisibleColumnsChange?: (columns: Map<React.Key, number>) => void;
    /**
     * Current state of sort (controlled).
     */
    sort?: Sorting | null;
    /**
     * Flag to indicate which key name matches the nested rendering of the tree.
     */
    nestedKey?: string;
    /**
     * Defines the size of the table.
     */
    size?: 'sm' | 'lg';
} & React.ComponentProps<typeof RootTable>;
export declare const Table: React.ForwardRefExoticComponent<Pick<Props, "sort" | "key" | "size" | "messages" | "onLoadMore" | "nestedKey" | "defaultExpandedKeys" | "expandedKeys" | "onExpandedChange" | "columnsVisibility" | "onSortChange" | "alwaysVisibleColumns" | "onVisibleColumnsChange" | "visibleColumns" | "defaultSort" | "defaultVisibleColumns" | keyof import("@clayui/table").IProps> & React.RefAttributes<HTMLDivElement>>;
