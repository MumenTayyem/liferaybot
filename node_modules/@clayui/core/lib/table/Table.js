"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Table = void 0;

var _shared = require("@clayui/shared");

var _table = _interopRequireDefault(require("@clayui/table"));

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = require("react-dom");

var _aria = require("../aria");

var _hooks = require("../hooks");

var _liveAnnouncer = require("../live-announcer");

var _context = require("./context");

var _useTreeNavigation2 = require("./useTreeNavigation");

var _excluded = ["alwaysVisibleColumns", "columnsVisibility", "children", "className", "defaultExpandedKeys", "defaultSort", "defaultVisibleColumns", "expandedKeys", "messages", "visibleColumns", "onExpandedChange", "onVisibleColumnsChange", "onLoadMore", "onSortChange", "size", "sort", "nestedKey"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var focusableElements = ['[role="row"]', 'td[role="gridcell"]'];
var locator = {
  cell: 'gridcell',
  row: 'row'
};
var defaultSet = new Set();

var Table = /*#__PURE__*/_react.default.forwardRef(function TableInner(_ref, outRef) {
  var _classNames;

  var _ref$alwaysVisibleCol = _ref.alwaysVisibleColumns,
      alwaysVisibleColumns = _ref$alwaysVisibleCol === void 0 ? new Set() : _ref$alwaysVisibleCol,
      _ref$columnsVisibilit = _ref.columnsVisibility,
      columnsVisibility = _ref$columnsVisibilit === void 0 ? true : _ref$columnsVisibilit,
      children = _ref.children,
      className = _ref.className,
      _ref$defaultExpandedK = _ref.defaultExpandedKeys,
      defaultExpandedKeys = _ref$defaultExpandedK === void 0 ? defaultSet : _ref$defaultExpandedK,
      defaultSort = _ref.defaultSort,
      _ref$defaultVisibleCo = _ref.defaultVisibleColumns,
      defaultVisibleColumns = _ref$defaultVisibleCo === void 0 ? new Map() : _ref$defaultVisibleCo,
      externalExpandedKeys = _ref.expandedKeys,
      _ref$messages = _ref.messages,
      messages = _ref$messages === void 0 ? {
    columnsVisibility: 'Manage Columns Visibility',
    columnsVisibilityDescription: 'At least one column must remain visible.',
    columnsVisibilityHeader: 'Columns Visibility',
    expandable: 'expandable',
    sortDescription: 'sortable column',
    sorting: 'sorted by column {0} in {1} order'
  } : _ref$messages,
      externalVisibleColumns = _ref.visibleColumns,
      onExpandedChange = _ref.onExpandedChange,
      onVisibleColumnsChange = _ref.onVisibleColumnsChange,
      onLoadMore = _ref.onLoadMore,
      onSortChange = _ref.onSortChange,
      size = _ref.size,
      externalSort = _ref.sort,
      nestedKey = _ref.nestedKey,
      otherProps = _objectWithoutProperties(_ref, _excluded);

  var _useControlledState = (0, _shared.useControlledState)({
    defaultName: 'defaultExpandedKeys',
    defaultValue: defaultExpandedKeys,
    handleName: 'onExpandedChange',
    name: 'expandedKeys',
    onChange: onExpandedChange,
    value: externalExpandedKeys
  }),
      _useControlledState2 = _slicedToArray(_useControlledState, 2),
      expandedKeys = _useControlledState2[0],
      setExpandedKeys = _useControlledState2[1];

  var _useControlledState3 = (0, _shared.useControlledState)({
    defaultName: 'defaultSort',
    defaultValue: defaultSort,
    handleName: 'onSortChange',
    name: 'sort',
    onChange: onSortChange,
    value: externalSort
  }),
      _useControlledState4 = _slicedToArray(_useControlledState3, 2),
      sort = _useControlledState4[0],
      setSorting = _useControlledState4[1];

  var _useControlledState5 = (0, _shared.useControlledState)({
    defaultName: 'defaultVisibleColumns',
    defaultValue: defaultVisibleColumns,
    handleName: 'onVisibleColumnsChange',
    name: 'visibleColumns',
    onChange: onVisibleColumnsChange,
    value: externalVisibleColumns
  }),
      _useControlledState6 = _slicedToArray(_useControlledState5, 2),
      visibleColumns = _useControlledState6[0],
      setVisibleColumns = _useControlledState6[1];

  var ref = (0, _hooks.useForwardRef)(outRef);
  var announcerAPI = (0, _react.useRef)(null);

  var _useTreeNavigation = (0, _useTreeNavigation2.useTreeNavigation)({
    disabled: !nestedKey,
    locator: locator,
    ref: ref
  }),
      navigationProps = _useTreeNavigation.navigationProps;

  var sortDescriptionId = (0, _shared.useId)();

  var _useState = (0, _react.useState)(0),
      _useState2 = _slicedToArray(_useState, 2),
      headCellsCount = _useState2[0],
      setHeadCellsCount = _useState2[1];

  return /*#__PURE__*/_react.default.createElement(_table.default, _extends({}, otherProps, navigationProps, {
    className: (0, _classnames.default)(className, (_classNames = {
      'table-nested-rows': nestedKey
    }, _defineProperty(_classNames, "table-".concat(size), size), _defineProperty(_classNames, 'table-sort', sort || sort === null), _classNames)),
    ref: ref,
    role: nestedKey ? 'treegrid' : undefined,
    style: {
      tableLayout: 'fixed'
    },
    tableVerticalAlignment: "middle"
  }), /*#__PURE__*/_react.default.createElement(_liveAnnouncer.LiveAnnouncer, {
    ref: announcerAPI
  }), /*#__PURE__*/_react.default.createElement(_aria.FocusWithinProvider, {
    containerRef: ref,
    focusableElements: focusableElements
  }, /*#__PURE__*/_react.default.createElement(_context.TableContext.Provider, {
    value: {
      alwaysVisibleColumns: alwaysVisibleColumns,
      columnsVisibility: columnsVisibility,
      expandedKeys: expandedKeys,
      headCellsCount: headCellsCount,
      messages: messages,
      nestedKey: nestedKey,
      onExpandedChange: setExpandedKeys,
      onHeadCellsChange: setHeadCellsCount,
      onLoadMore: onLoadMore,
      onSortChange: (0, _react.useCallback)(function (sort, textValue) {
        announcerAPI.current.announce((0, _shared.sub)(messages.sorting, [textValue, sort.direction]));
        setSorting(sort);
      }, [setSorting]),
      onVisibleColumnsChange: (0, _react.useCallback)(function (column, index) {
        if (Array.isArray(column)) {
          var _columns = new Map(visibleColumns);

          column.forEach(function (value, index) {
            if (_columns.has(value)) {
              _columns.delete(value);
            } else {
              _columns.set(value, index);
            }
          });
          setVisibleColumns(_columns);
          return;
        }

        var columns = new Map(visibleColumns);

        if (columns.has(column)) {
          columns.delete(column);
        } else {
          columns.set(column, index);
        }

        setVisibleColumns(columns);
      }, [setVisibleColumns, visibleColumns]),
      sort: sort,
      sortDescriptionId: sortDescriptionId,
      treegrid: !!nestedKey,
      visibleColumns: visibleColumns
    }
  }, children)), /*#__PURE__*/(0, _reactDom.createPortal)( /*#__PURE__*/_react.default.createElement("div", {
    "aria-hidden": "true",
    id: sortDescriptionId,
    style: {
      display: 'none'
    }
  }, messages.sortDescription), document.body));
});

exports.Table = Table;