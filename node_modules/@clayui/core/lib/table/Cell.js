"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Cell = void 0;

var _button = _interopRequireDefault(require("@clayui/button"));

var _icon = _interopRequireDefault(require("@clayui/icon"));

var _layout = _interopRequireDefault(require("@clayui/layout"));

var _loadingIndicator = _interopRequireDefault(require("@clayui/loading-indicator"));

var _shared = require("@clayui/shared");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _aria = require("../aria");

var _ScopeContext = require("./ScopeContext");

var _context = require("./context");

var _excluded = ["UNSAFE_resizable", "UNSAFE_resizerClassName", "UNSAFE_resizerOnMouseDown", "align", "children", "className", "delimiter", "expanded", "index", "keyValue", "sortable", "textAlign", "textValue", "truncate", "width", "wrap"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Cell = /*#__PURE__*/_react.default.forwardRef(function CellInner(_ref, ref) {
  var _classNames;

  var UNSAFE_resizable = _ref.UNSAFE_resizable,
      UNSAFE_resizerClassName = _ref.UNSAFE_resizerClassName,
      UNSAFE_resizerOnMouseDown = _ref.UNSAFE_resizerOnMouseDown,
      align = _ref.align,
      children = _ref.children,
      className = _ref.className,
      delimiter = _ref.delimiter,
      expanded = _ref.expanded,
      index = _ref.index,
      keyValue = _ref.keyValue,
      sortable = _ref.sortable,
      textAlign = _ref.textAlign,
      textValue = _ref.textValue,
      truncate = _ref.truncate,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? 'auto' : _ref$width,
      _ref$wrap = _ref.wrap,
      wrap = _ref$wrap === void 0 ? true : _ref$wrap,
      otherProps = _objectWithoutProperties(_ref, _excluded);

  var _useTable = (0, _context.useTable)(),
      columnsVisibility = _useTable.columnsVisibility,
      expandedKeys = _useTable.expandedKeys,
      headCellsCount = _useTable.headCellsCount,
      messages = _useTable.messages,
      onExpandedChange = _useTable.onExpandedChange,
      onSortChange = _useTable.onSortChange,
      sort = _useTable.sort,
      sortDescriptionId = _useTable.sortDescriptionId,
      treegrid = _useTable.treegrid;

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      isFocused = _useState2[0],
      setIsFocused = _useState2[1];

  var focusWithinProps = (0, _aria.useFocusWithin)({
    disabled: !treegrid,
    id: keyValue,
    onFocusChange: setIsFocused
  });
  var scope = (0, _ScopeContext.useScope)();

  var _useRow = (0, _context.useRow)(),
      divider = _useRow.divider,
      expandable = _useRow.expandable,
      isLoading = _useRow.isLoading,
      key = _useRow.key,
      lazy = _useRow.lazy,
      level = _useRow.level,
      loadMore = _useRow.loadMore;

  var isHead = scope === _ScopeContext.Scope.Head;
  var As = isHead ? 'th' : 'td';

  var childrenCount = _react.default.Children.count(children);

  var toggle = (0, _react.useCallback)(function (key) {
    var newExpandedKeys = new Set(expandedKeys);

    if (newExpandedKeys.has(key)) {
      newExpandedKeys.delete(key);
    } else {
      newExpandedKeys.add(key);
    }

    onExpandedChange(newExpandedKeys);
  }, [expandedKeys, onExpandedChange]);
  var doSort = (0, _react.useCallback)(function () {
    return onSortChange({
      column: keyValue,
      direction: sort && keyValue === sort.column ? sort.direction === 'ascending' ? 'descending' : 'ascending' : 'ascending'
    }, textValue);
  }, [onSortChange, keyValue, sort]);
  var isExpandable = (expandable || lazy) && !isLoading;
  var isSortable = isHead && sortable;
  return /*#__PURE__*/_react.default.createElement(As, _extends({}, otherProps, focusWithinProps, {
    "aria-colindex": isHead && !sortable ? undefined : index + 1,
    "aria-describedby": isSortable ? sortDescriptionId : undefined,
    "aria-sort": isSortable ? sort && keyValue === sort.column ? sort.direction : 'none' : undefined,
    className: (0, _classnames.default)(className, (_classNames = {
      'table-cell-expand': truncate || expanded
    }, _defineProperty(_classNames, "table-cell-".concat(delimiter), delimiter), _defineProperty(_classNames, "table-column-text-".concat(textAlign), textAlign), _defineProperty(_classNames, "text-".concat(align), align), _defineProperty(_classNames, 'table-cell-ws-nowrap', !wrap), _defineProperty(_classNames, 'table-focus', focusWithinProps.tabIndex === 0 && isFocused), _defineProperty(_classNames, 'table-head-title', isHead), _classNames)),
    colSpan: divider ? headCellsCount + (columnsVisibility ? 1 : 0) : undefined,
    "data-id": typeof keyValue === 'number' ? "number,".concat(keyValue) : "string,".concat(keyValue),
    onClick: function onClick(event) {
      if (!isSortable) {
        return;
      }

      event.preventDefault();
      doSort();
    },
    onKeyDown: function onKeyDown(event) {
      if (event.key === _shared.Keys.Enter) {
        if (isSortable) {
          event.preventDefault();
          doSort();
        }

        if (treegrid && isExpandable) {
          toggle(key);
        }
      }
    },
    ref: ref,
    role: treegrid ? 'gridcell' : undefined,
    style: {
      width: width
    },
    tabIndex: focusWithinProps.tabIndex
  }), isSortable ? /*#__PURE__*/_react.default.createElement(_layout.default.ContentRow, null, /*#__PURE__*/_react.default.createElement(_layout.default.ContentCol, {
    expand: true
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "text-truncate-inline"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "text-truncate"
  }, children))), /*#__PURE__*/_react.default.createElement(_layout.default.ContentCol, null, /*#__PURE__*/_react.default.createElement("button", {
    "aria-label": messages['sortDescription'],
    className: "component-action",
    type: "button"
  }, /*#__PURE__*/_react.default.createElement(_icon.default, {
    symbol: sort && keyValue === sort.column ? sort.direction === 'descending' ? 'order-list-down' : 'order-list-up' : 'order-arrow'
  })))) : truncate ? /*#__PURE__*/_react.default.createElement("span", {
    className: "text-truncate-inline"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "text-truncate"
  }, children)) : treegrid && index === 0 && !isHead ? /*#__PURE__*/_react.default.createElement(_layout.default.ContentRow, {
    style: {
      paddingLeft: (level - (expandable || lazy ? 1 : 0)) * 28 - (expandable || lazy ? 4 : 0)
    }
  }, isExpandable && /*#__PURE__*/_react.default.createElement(_layout.default.ContentCol, {
    className: "autofit-col-toggle"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    "aria-label": messages['expandable'],
    borderless: true,
    displayType: "secondary",
    monospaced: true,
    onClick: function onClick() {
      if (expandable) {
        toggle(key);
      } else {
        loadMore();
      }
    },
    size: "xs",
    tabIndex: -1
  }, /*#__PURE__*/_react.default.createElement(_icon.default, {
    symbol: expandedKeys.has(key) ? 'angle-down' : 'angle-right'
  }))), isLoading && /*#__PURE__*/_react.default.createElement(_layout.default.ContentCol, {
    className: "autofit-col-toggle"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "btn-monospaced btn-xs"
  }, /*#__PURE__*/_react.default.createElement(_loadingIndicator.default, {
    size: "sm"
  }))), _react.default.Children.map(children, function (child, index) {
    if (!child) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement(_layout.default.ContentCol, {
      className: (0, _classnames.default)({
        'autofit-col-checkbox': /*#__PURE__*/_react.default.isValidElement(child) && // @ts-ignore
        (child === null || child === void 0 ? void 0 : child.type.displayName) === 'ClayIcon'
      }),
      expand: index === childrenCount - 1
    }, child);
  })) : children, UNSAFE_resizable && /*#__PURE__*/_react.default.createElement("div", {
    className: UNSAFE_resizerClassName,
    onMouseDown: UNSAFE_resizerOnMouseDown
  }));
});

exports.Cell = Cell;
Cell.displayName = 'Item';