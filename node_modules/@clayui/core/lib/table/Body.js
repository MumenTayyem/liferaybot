"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Body = void 0;

var _shared = require("@clayui/shared");

var _react = _interopRequireWildcard(require("react"));

var _collection = require("../collection");

var _useTree = require("../tree-view/useTree");

var _ScopeContext = require("./ScopeContext");

var _context = require("./context");

var _excluded = ["children", "defaultItems", "items", "onItemsChange"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// TODO: Move the implementation to the Collection and use the benefits of
// generator to pause the iteration and return later with a form of
// yield CPU time for the browser.
function* flatten(array, expandedKeys, nestedKey) {
  var level = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  var loc = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];

  for (var i = 0; i < array.length; i++) {
    var item = _objectSpread(_objectSpread({}, array[i]), {}, {
      _index: i,
      _level: level,
      _loc: [].concat(_toConsumableArray(loc), [i]),
      _size: array.length
    });

    if (Array.isArray(array[i][nestedKey])) {
      delete item[nestedKey]; // @ts-ignore

      item._expandable = true;
      yield item; // TODO: Make it dynamic using the key generated by the developer at
      // render time.

      if (expandedKeys.has(array[i]['id'])) {
        yield* flatten(array[i][nestedKey], expandedKeys, nestedKey, level + 1, item['_loc']);
      }
    } else {
      yield item;
    }
  }
}

function BodyInner(_ref, ref) {
  var children = _ref.children,
      defaultItems = _ref.defaultItems,
      outItems = _ref.items,
      onItemsChange = _ref.onItemsChange,
      otherProps = _objectWithoutProperties(_ref, _excluded);

  var _useTable = (0, _context.useTable)(),
      expandedKeys = _useTable.expandedKeys,
      nestedKey = _useTable.nestedKey;

  var _useControlledState = (0, _shared.useControlledState)({
    defaultName: 'defaultItems',
    defaultValue: defaultItems !== null && defaultItems !== void 0 ? defaultItems : [],
    handleName: 'onItemsChange',
    name: 'items',
    onChange: onItemsChange,
    value: outItems
  }),
      _useControlledState2 = _slicedToArray(_useControlledState, 2),
      treeItems = _useControlledState2[0],
      setTreeItems = _useControlledState2[1];

  var insert = (0, _react.useCallback)(function (path, value) {
    var tree = (0, _useTree.createImmutableTree)(treeItems, nestedKey);
    tree.produce({
      op: 'add',
      path: path,
      value: value
    });
    setTreeItems(tree.applyPatches());
  }, [treeItems]);
  var items = (0, _react.useMemo)(function () {
    if (!nestedKey || !treeItems) {
      return treeItems;
    }

    return _toConsumableArray(flatten(treeItems, expandedKeys, nestedKey));
  }, [outItems, expandedKeys, nestedKey]);
  return /*#__PURE__*/_react.default.createElement("tbody", _extends({}, otherProps, {
    ref: ref
  }), /*#__PURE__*/_react.default.createElement(_ScopeContext.ScopeContext.Provider, {
    value: _ScopeContext.Scope.Body
  }, /*#__PURE__*/_react.default.createElement(_context.BodyContext.Provider, {
    value: {
      insert: insert
    }
  }, /*#__PURE__*/_react.default.createElement(_collection.Collection, {
    connectNested: false,
    itemContainer: (0, _react.useCallback)(function (_ref2) {
      var children = _ref2.children,
          item = _ref2.item,
          keyValue = _ref2.keyValue;
      return item ? /*#__PURE__*/_react.default.cloneElement(children, {
        _expandable: item._expandable,
        _index: item._index,
        _item: item,
        _level: item._level,
        _loc: item._loc,
        _size: item._size,
        keyValue: keyValue
      }) : children;
    }, []),
    items: items,
    passthroughKey: false
  }, children))));
}

var Body = /*#__PURE__*/_react.default.forwardRef(BodyInner);

exports.Body = Body;
Body.displayName = 'TableBody';