"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DragAndDropProvider = DragAndDropProvider;
exports.TARGET_POSITION = void 0;
exports.getNewItemPath = getNewItemPath;
exports.useDnD = void 0;

var _shared = require("@clayui/shared");

var _ariaHidden = require("aria-hidden");

var _react = _interopRequireWildcard(require("react"));

var _reactDom = require("react-dom");

var _liveAnnouncer = require("../live-announcer");

var _context = require("./context");

var _useTree = require("./useTree");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var DnDContext = /*#__PURE__*/_react.default.createContext({});

function getFocusableTree(rootRef) {
  if (!rootRef.current) {
    return [];
  }

  return _toConsumableArray(rootRef.current.querySelectorAll('[role="treeitem"][data-dnd="true"]')).filter(function (element) {
    return !(element.getAttribute('disabled') || element.closest('.treeview-item-dragging'));
  });
}

function getNextTarget(rootRef, dragKey) {
  var focusableTree = getFocusableTree(rootRef);
  var dragPosition = 0;
  var items = focusableTree.filter(function (element, index) {
    var _split = element.getAttribute('data-id').split(','),
        _split2 = _slicedToArray(_split, 2),
        type = _split2[0],
        key = _split2[1];

    var reactKey = type === 'number' ? Number(key) : key;

    if (reactKey === dragKey) {
      dragPosition = index;
    }

    return !(reactKey === dragKey || element.closest("[data-id=\"".concat(typeof dragKey === 'number' ? "number,".concat(dragKey) : "string,".concat(dragKey), "\"]")));
  });
  var target = items[dragPosition === items.length ? dragPosition - 1 : dragPosition];

  if (!target) {
    return null;
  }

  var _split3 = target.getAttribute('data-id').split(','),
      _split4 = _slicedToArray(_split3, 2),
      type = _split4[0],
      key = _split4[1];

  return type === 'number' ? Number(key) : key;
}

var defaultMessages = {
  dragDescriptionKeyboard: 'Press Enter to start dragging.',
  dragItem: 'Drag',
  dragStartedKeyboard: 'Started dragging. Press Tab to navigate to a drop target, then press Enter to drop, or press Escape to cancel.',
  dropCanceled: 'Drop cancelled.',
  dropComplete: 'Drop complete.',
  dropDescriptionKeyboard: 'Press Enter to drop. Press Escape to cancel drag.',
  dropIndicator: 'drop indicator',
  dropOn: 'Drop on',
  endDragKeyboard: 'Dragging. Press Enter to cancel drag.',
  insertAfter: 'Insert on bottom of the',
  insertBefore: 'Insert on top of the'
};

function DragAndDropProvider(_ref) {
  var children = _ref.children,
      _ref$messages = _ref.messages,
      messages = _ref$messages === void 0 ? defaultMessages : _ref$messages,
      nestedKey = _ref.nestedKey,
      onItemMove = _ref.onItemMove,
      onItemHover = _ref.onItemHover,
      rootRef = _ref.rootRef;

  var _useTreeViewContext = (0, _context.useTreeViewContext)(),
      dragAndDrop = _useTreeViewContext.dragAndDrop,
      items = _useTreeViewContext.items,
      layout = _useTreeViewContext.layout,
      reorder = _useTreeViewContext.reorder;

  var announcerRef = (0, _react.useRef)(null);

  var _useState = (0, _react.useState)({
    currentDrag: null,
    currentTarget: null,
    lastItem: null,
    mode: null,
    position: null,
    status: null
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var onDragStart = (0, _react.useCallback)(function (mode, dragKey) {
    if (mode === 'mouse') {
      setState(function (state) {
        return _objectSpread(_objectSpread({}, state), {}, {
          currentDrag: dragKey,
          mode: 'mouse',
          status: null
        });
      });
    } else {
      var _announcerRef$current;

      var nextTargetKey = getNextTarget(rootRef, dragKey);

      if (nextTargetKey === null) {
        return;
      }

      (_announcerRef$current = announcerRef.current) === null || _announcerRef$current === void 0 ? void 0 : _announcerRef$current.announce(messages.dragStartedKeyboard);
      setState(function (state) {
        return _objectSpread(_objectSpread({}, state), {}, {
          currentDrag: dragKey,
          currentTarget: nextTargetKey,
          mode: 'keyboard',
          position: 'bottom',
          status: null
        });
      });
    }
  }, []);
  var onEnd = (0, _react.useCallback)(function () {
    setState(function (state) {
      return {
        currentDrag: null,
        currentTarget: null,
        lastItem: state.currentDrag,
        mode: null,
        position: null,
        status: null
      };
    });
  }, []);
  var onPositionChange = (0, _react.useCallback)(function (key, position) {
    setState(function (state) {
      return _objectSpread(_objectSpread({}, state), {}, {
        currentTarget: key,
        position: position
      });
    });
  }, []);
  var onCancel = (0, _react.useCallback)(function () {
    var _announcerRef$current2;

    (_announcerRef$current2 = announcerRef.current) === null || _announcerRef$current2 === void 0 ? void 0 : _announcerRef$current2.announce(messages.dropCanceled);
    setState(function (state) {
      return {
        currentDrag: null,
        currentTarget: null,
        lastItem: state.currentDrag,
        mode: null,
        position: null,
        status: 'canceled'
      };
    });
  }, []);
  var onDrop = (0, _react.useCallback)(function () {
    var _announcerRef$current3;

    var currentDrag = state.currentDrag,
        currentTarget = state.currentTarget,
        position = state.position;
    var dropLayoutItem = layout.layoutKeys.current.get(currentTarget);
    var dragLayoutItem = layout.layoutKeys.current.get(currentDrag);
    var indexes = getNewItemPath(dropLayoutItem.loc, position);

    if (onItemMove) {
      var tree = (0, _useTree.createImmutableTree)(items, nestedKey);
      var dragNode = tree.nodeByPath(dragLayoutItem.loc);
      var isMoved = onItemMove(dragNode.item, tree.nodeByPath(indexes).parent, {
        next: indexes[indexes.length - 1],
        previous: dragNode.index
      });

      if (!isMoved) {
        onCancel();
        return;
      }
    }

    reorder(dragLayoutItem.cursor, dropLayoutItem.cursor, position);
    setState({
      currentDrag: null,
      currentTarget: null,
      lastItem: currentDrag,
      mode: null,
      position: null,
      status: 'complete'
    });
    (_announcerRef$current3 = announcerRef.current) === null || _announcerRef$current3 === void 0 ? void 0 : _announcerRef$current3.announce(messages.dropComplete);
  }, [state, onCancel]);
  (0, _react.useEffect)(function () {
    if (state.lastItem && state.status) {
      var _rootRef$current;

      var element = (_rootRef$current = rootRef.current) === null || _rootRef$current === void 0 ? void 0 : _rootRef$current.querySelector("[data-id=\"".concat(typeof state.lastItem === 'number' ? "number,".concat(state.lastItem) : "string,".concat(state.lastItem), "\"]").concat(state.status === 'canceled' ? ' [data-draggable]' : ''));

      if (element) {
        element.focus();
      }
    }
  }, [state]);
  (0, _react.useEffect)(function () {
    if (rootRef.current && state.mode === 'keyboard') {
      return (0, _ariaHidden.suppressOthers)([].concat(_toConsumableArray(rootRef.current.querySelectorAll('[aria-roledescription="drop indicator"], [data-draggable="true"], [class="component-text"]')), [document.body.querySelector('[data-live-announcer="true"]')]));
    }
  }, [state.mode]);
  var dragDescribedBy = (0, _shared.useId)();
  var dragDropDescribedBy = (0, _shared.useId)();
  var dragCancelDescribedBy = (0, _shared.useId)();
  (0, _react.useEffect)(function () {
    if (state.mode === 'keyboard') {
      var denylist = new Set();

      var onKeyDown = function onKeyDown(event) {
        switch (event.key) {
          case _shared.Keys.Esc:
            onCancel();
            break;

          case _shared.Keys.Enter:
            {
              if (event.target.getAttribute('aria-roledescription')) {
                onDrop();
              }

              break;
            }

          case _shared.Keys.Up:
          case _shared.Keys.Down:
            {
              event.preventDefault();
              event.stopPropagation();
              var focusableItems = getFocusableTree(rootRef).filter(function (item) {
                if (item.getAttribute('data-dnd-dropping')) {
                  return true;
                }

                var _split5 = item.getAttribute('data-id').split(','),
                    _split6 = _slicedToArray(_split5, 2),
                    type = _split6[0],
                    key = _split6[1];

                return !denylist.has(type === 'number' ? Number(key) : key);
              });

              var _position = focusableItems.findIndex(function (element) {
                return element.getAttribute('data-dnd-dropping');
              });

              var _item = focusableItems[event.key === _shared.Keys.Up ? _position - 1 : _position + 1];

              var newState = _objectSpread({}, state);

              if (_item && denylist.has(newState.currentTarget)) {
                var _split7 = _item.getAttribute('data-id').split(','),
                    _split8 = _slicedToArray(_split7, 2),
                    type = _split8[0],
                    _key = _split8[1];

                newState.position = event.key === _shared.Keys.Up ? 'top' : 'bottom';
                newState.currentTarget = type === 'number' ? Number(_key) : _key;
              } else if (event.key === _shared.Keys.Up && state.position === 'bottom' || event.key === _shared.Keys.Down && state.position === 'top') {
                newState.position = 'middle';
              } else if (event.key === _shared.Keys.Down && state.position === 'middle') {
                newState.position = 'bottom';
              } else {
                if (!_item) {
                  newState.position = _position === 0 ? 'top' : 'bottom';
                } else {
                  var _split9 = _item.getAttribute('data-id').split(','),
                      _split10 = _slicedToArray(_split9, 2),
                      _type = _split10[0],
                      _key2 = _split10[1];

                  newState.position = event.key === _shared.Keys.Up ? 'bottom' : 'middle';
                  newState.currentTarget = _type === 'number' ? Number(_key2) : _key2;
                }
              }

              if (onItemHover) {
                var dropLayoutItem = layout.layoutKeys.current.get(newState.currentTarget);
                var dragLayoutItem = layout.layoutKeys.current.get(newState.currentDrag);
                var tree = (0, _useTree.createImmutableTree)(items, nestedKey);
                var indexes = getNewItemPath(dropLayoutItem.loc, newState.position);
                var dragNode = tree.nodeByPath(dragLayoutItem.loc);
                var isHovered = onItemHover(dragNode.item, tree.nodeByPath(indexes).parent, {
                  next: indexes[indexes.length - 1],
                  previous: dragNode.index
                });

                if (!isHovered) {
                  // Removes the item from the list so that the next function
                  // call looks for the next element.
                  denylist.add(newState.currentTarget); // Try moving to the next item.

                  onKeyDown(event);
                  return;
                }
              }

              setState(newState);
              break;
            }

          default:
            break;
        }
      };

      document.addEventListener('keydown', onKeyDown, true);
      return function () {
        document.removeEventListener('keydown', onKeyDown, true);
      };
    }
  }, [state]);
  return /*#__PURE__*/_react.default.createElement(DnDContext.Provider, {
    value: _objectSpread(_objectSpread({}, state), {}, {
      dragCancelDescribedBy: dragCancelDescribedBy,
      dragDescribedBy: dragDescribedBy,
      dragDropDescribedBy: dragDropDescribedBy,
      messages: messages,
      onCancel: onCancel,
      onDragStart: onDragStart,
      onDrop: onDrop,
      onEnd: onEnd,
      onPositionChange: onPositionChange
    })
  }, dragAndDrop && /*#__PURE__*/_react.default.createElement(_liveAnnouncer.LiveAnnouncer, {
    ref: announcerRef
  }), state.mode === 'keyboard' ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("span", {
    "aria-hidden": "true",
    "data-focus-scope-start": "true",
    tabIndex: 0
  }), children, /*#__PURE__*/_react.default.createElement("span", {
    "aria-hidden": "true",
    "data-focus-scope-end": "true",
    tabIndex: 0
  })) : children, dragAndDrop && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/(0, _reactDom.createPortal)( /*#__PURE__*/_react.default.createElement("div", {
    "aria-hidden": "true",
    id: dragDescribedBy,
    style: {
      display: 'none'
    }
  }, messages.dragDescriptionKeyboard), document.body), state.mode === 'keyboard' && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/(0, _reactDom.createPortal)( /*#__PURE__*/_react.default.createElement("div", {
    "aria-hidden": "true",
    id: dragDropDescribedBy,
    style: {
      display: 'none'
    }
  }, messages.dropDescriptionKeyboard), document.body), /*#__PURE__*/(0, _reactDom.createPortal)( /*#__PURE__*/_react.default.createElement("div", {
    "aria-hidden": "true",
    id: dragCancelDescribedBy,
    style: {
      display: 'none'
    }
  }, messages.endDragKeyboard), document.body))));
}

var TARGET_POSITION = {
  BOTTOM: 'bottom',
  MIDDLE: 'middle',
  TOP: 'top'
};
exports.TARGET_POSITION = TARGET_POSITION;

function getNewItemPath(path, overPosition) {
  var indexes = _toConsumableArray(path);

  var lastPathIndex = indexes.pop();

  switch (overPosition) {
    case TARGET_POSITION.BOTTOM:
      indexes = [].concat(_toConsumableArray(indexes), [lastPathIndex + 1]);
      break;

    case TARGET_POSITION.MIDDLE:
      indexes = [].concat(_toConsumableArray(indexes), [lastPathIndex, 0]);
      break;

    case TARGET_POSITION.TOP:
      indexes = [].concat(_toConsumableArray(indexes), [lastPathIndex]);
      break;

    default:
      break;
  }

  return indexes;
}

var useDnD = function useDnD() {
  return (0, _react.useContext)(DnDContext);
};

exports.useDnD = useDnD;