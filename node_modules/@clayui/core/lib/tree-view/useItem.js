"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ItemContextProvider = ItemContextProvider;
exports.useItem = useItem;

var _react = _interopRequireWildcard(require("react"));

var _reactDnd = require("react-dnd");

var _reactDndHtml5Backend = require("react-dnd-html5-backend");

var _collection = require("../collection");

var _Collection = require("./Collection");

var _DragAndDrop = require("./DragAndDrop");

var _context = require("./context");

var _useTree = require("./useTree");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var ItemContext = /*#__PURE__*/_react.default.createContext({});

var DISTANCE = 0.2;

function getKey(key) {
  return typeof key === 'string' ? "".concat(key).replace('.$', '') : key;
}

function isMovingIntoItself(from, path) {
  var fromClosestPathTree = from.slice(0, path.length);
  return !fromClosestPathTree.some(function (loc, index) {
    return loc !== path[index];
  }) && path.length > from.length;
}

function ItemContextProvider(_ref) {
  var _item$nestedKey;

  var children = _ref.children,
      value = _ref.value;

  var _useTreeViewContext = (0, _context.useTreeViewContext)(),
      dragAndDrop = _useTreeViewContext.dragAndDrop,
      expandedKeys = _useTreeViewContext.expandedKeys,
      items = _useTreeViewContext.items,
      layout = _useTreeViewContext.layout,
      nestedKey = _useTreeViewContext.nestedKey,
      onItemHover = _useTreeViewContext.onItemHover,
      onItemMove = _useTreeViewContext.onItemMove,
      open = _useTreeViewContext.open,
      reorder = _useTreeViewContext.reorder;

  var _useItem = useItem(),
      parentCursor = _useItem.cursor,
      parentIndexes = _useItem.indexes,
      parentItemRef = _useItem.itemRef,
      parentKey = _useItem.key;

  var keys = (0, _collection.useCollectionKeys)();

  var _useDnD = (0, _DragAndDrop.useDnD)(),
      currentDrag = _useDnD.currentDrag,
      currentTarget = _useDnD.currentTarget,
      mode = _useDnD.mode,
      onDragStart = _useDnD.onDragStart,
      onEnd = _useDnD.onEnd,
      onPositionChange = _useDnD.onPositionChange,
      position = _useDnD.position;

  var keyRef = (0, _react.useRef)(getKey(value['key']));
  var childRef = (0, _react.useRef)(null);
  var hoverTimeoutIdRef = (0, _react.useRef)();
  var isValidDrop = (0, _react.useRef)(true); // Holds a reference to the index value and only updates when its positions
  // change. This causes a ripple effect that we only want to update
  // when necessary.

  var indexes = (0, _react.useMemo)(function () {
    return [].concat(_toConsumableArray(parentIndexes !== null && parentIndexes !== void 0 ? parentIndexes : []), [value.index]);
  }, [parentIndexes, value.index]);
  var cursor = (0, _react.useMemo)(function () {
    return [].concat(_toConsumableArray(parentCursor !== null && parentCursor !== void 0 ? parentCursor : []), [keyRef.current]);
  }, [parentCursor, keyRef.current]);

  var item = _objectSpread(_objectSpread(_objectSpread({}, value), keys.current.get(keyRef.current)), {}, {
    cursor: cursor,
    indexes: indexes,
    itemRef: childRef,
    key: keyRef.current,
    parentItemRef: parentItemRef
  });

  var hasLazyChildren = Boolean(nestedKey && ((_item$nestedKey = item[nestedKey]) === null || _item$nestedKey === void 0 ? void 0 : _item$nestedKey.length));
  (0, _react.useEffect)(function () {
    return layout.createPartialLayoutItem(keyRef.current, hasLazyChildren, indexes, cursor, parentKey);
  }, [layout.createPartialLayoutItem, hasLazyChildren, keyRef, parentKey]);
  (0, _react.useEffect)(function () {
    return layout.patchItem(keyRef.current, cursor, indexes);
  }, [layout.patchItem, indexes, cursor]);

  var _useDrag = (0, _reactDnd.useDrag)({
    begin: function begin() {
      onDragStart('mouse', item.key);
    },
    canDrag: function canDrag() {
      return dragAndDrop !== null && dragAndDrop !== void 0 ? dragAndDrop : false;
    },
    collect: function collect(monitor) {
      return {
        isDragging: monitor.isDragging()
      };
    },
    end: function end() {
      onEnd();
    },
    item: {
      item: item,
      type: 'treeViewItem'
    }
  }),
      _useDrag2 = _slicedToArray(_useDrag, 3),
      isDragging = _useDrag2[0].isDragging,
      drag = _useDrag2[1],
      preview = _useDrag2[2];

  (0, _react.useEffect)(function () {
    // Resets the flag when the drag and drop is finished or cancelled.
    if (mode === null) {
      isValidDrop.current = true;
    }
  }, [mode]);
  (0, _react.useEffect)(function () {
    preview((0, _reactDndHtml5Backend.getEmptyImage)(), {
      captureDraggingState: true
    });
  }, [preview]);

  var _useDrop = (0, _reactDnd.useDrop)({
    accept: 'treeViewItem',
    canDrop: function canDrop(dragItem) {
      return !isMovingIntoItself(dragItem['item'].indexes, item.indexes);
    },
    collect: function collect(monitor) {
      return {
        canDrop: monitor.canDrop(),
        overTarget: monitor.isOver({
          shallow: true
        })
      };
    },
    drop: function drop(dragItem, monitor) {
      if (monitor.didDrop() || !monitor.canDrop() || dragItem.item.key === item.key || !isValidDrop.current) {
        return;
      }

      if (!childRef || childRef.current === null) {
        return;
      }

      var currentPosition = position;

      if (item.key !== currentTarget) {
        currentPosition = _DragAndDrop.TARGET_POSITION.TOP;
      }

      var indexes = (0, _DragAndDrop.getNewItemPath)(item.indexes, currentPosition);

      if (onItemMove) {
        var tree = (0, _useTree.createImmutableTree)(items, nestedKey);
        var isMoved = onItemMove((0, _Collection.removeItemInternalProps)(dragItem.item), tree.nodeByPath(indexes).parent, {
          next: indexes[indexes.length - 1],
          previous: dragItem.item['index']
        });

        if (!isMoved) {
          return;
        }
      }

      reorder(dragItem.item.cursor, item.cursor, currentPosition);
    },
    hover: function hover(dragItem, monitor) {
      if (!monitor.canDrop() || isDragging) {
        return;
      }

      if (!monitor.isOver({
        shallow: true
      })) {
        return;
      }

      var child = item[nestedKey];
      var dropItemRect = childRef.current.getBoundingClientRect();
      var clientOffsetY = monitor.getClientOffset().y;
      var currentPosition = _DragAndDrop.TARGET_POSITION.MIDDLE;

      if (clientOffsetY < dropItemRect.height * DISTANCE + dropItemRect.top) {
        currentPosition = _DragAndDrop.TARGET_POSITION.TOP;
      } else if (clientOffsetY > dropItemRect.bottom - dropItemRect.height * DISTANCE && !expandedKeys.has(item.key)) {
        currentPosition = _DragAndDrop.TARGET_POSITION.BOTTOM;
      }

      var currentKey = item.key;

      if (currentPosition === _DragAndDrop.TARGET_POSITION.TOP && item.prevKey && !expandedKeys.has(item.prevKey)) {
        currentPosition = _DragAndDrop.TARGET_POSITION.BOTTOM;
        currentKey = item.prevKey;
      }

      if (currentPosition === _DragAndDrop.TARGET_POSITION.MIDDLE && typeof hoverTimeoutIdRef.current !== 'number' && !expandedKeys.has(item.key) && child && Array.isArray(child) && child.length > 0) {
        hoverTimeoutIdRef.current = setTimeout(function () {
          hoverTimeoutIdRef.current = null;

          if (monitor.isOver({
            shallow: true
          })) {
            open(item.key);
          }
        }, 500);
      }

      if (onItemHover) {
        var tree = (0, _useTree.createImmutableTree)(items, nestedKey);

        var _indexes = (0, _DragAndDrop.getNewItemPath)(item.indexes, currentPosition);

        var isHovered = onItemHover((0, _Collection.removeItemInternalProps)(dragItem['item']), tree.nodeByPath(_indexes).parent, {
          next: _indexes[_indexes.length - 1],
          previous: dragItem['item'].index
        });

        if (!isHovered) {
          isValidDrop.current = false;
          return;
        }
      }

      isValidDrop.current = true;

      if (currentPosition !== position) {
        onPositionChange(currentKey, currentPosition);
      }
    }
  }),
      _useDrop2 = _slicedToArray(_useDrop, 2),
      overTarget = _useDrop2[0].overTarget,
      drop = _useDrop2[1];

  if (items && items.length && dragAndDrop) {
    drag(drop(childRef));
  }

  return /*#__PURE__*/_react.default.createElement(ItemContext.Provider, {
    value: item
  }, /*#__PURE__*/_react.default.cloneElement(children, {
    isDragging: mode === 'keyboard' && currentDrag === item.key || isDragging,
    overPosition: position,
    overTarget: currentTarget === item.key || overTarget,
    ref: childRef
  }));
}

function useItem() {
  return (0, _react.useContext)(ItemContext);
}