"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TreeViewItem = void 0;
exports.TreeViewItemStack = TreeViewItemStack;

var _button = _interopRequireDefault(require("@clayui/button"));

var _icon = _interopRequireDefault(require("@clayui/icon"));

var _layout = _interopRequireDefault(require("@clayui/layout"));

var _loadingIndicator = _interopRequireDefault(require("@clayui/loading-indicator"));

var _shared = require("@clayui/shared");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _aria = require("../aria");

var _liveAnnouncer = require("../live-announcer");

var _Collection = require("./Collection");

var _DragAndDrop = require("./DragAndDrop");

var _context = require("./context");

var _useItem = require("./useItem");

var _excluded = ["actions", "children", "expandable", "isDragging", "overPosition", "overTarget"],
    _excluded2 = ["actions", "children", "disabled", "expandable", "expanderDisabled", "isNonDraggrable", "labelId", "loading", "onLoadMore", "tabIndex"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var SpacingContext = /*#__PURE__*/_react.default.createContext(0);

var TreeViewItem = /*#__PURE__*/_react.default.forwardRef(function TreeViewItemInner(_ref, ref) {
  var _right$type, _itemStackProps$style, _nodeProps$style;

  var actions = _ref.actions,
      children = _ref.children,
      expandable = _ref.expandable,
      isDragging = _ref.isDragging,
      overPosition = _ref.overPosition,
      overTarget = _ref.overTarget,
      otherProps = _objectWithoutProperties(_ref, _excluded);

  var spacing = (0, _react.useContext)(SpacingContext);

  var _useTreeViewContext = (0, _context.useTreeViewContext)(),
      childrenRoot = _useTreeViewContext.childrenRoot,
      close = _useTreeViewContext.close,
      dragAndDrop = _useTreeViewContext.dragAndDrop,
      expandDoubleClick = _useTreeViewContext.expandDoubleClick,
      expandedKeys = _useTreeViewContext.expandedKeys,
      nestedKey = _useTreeViewContext.nestedKey,
      onRenameItem = _useTreeViewContext.onRenameItem,
      onSelect = _useTreeViewContext.onSelect,
      open = _useTreeViewContext.open,
      remove = _useTreeViewContext.remove,
      replace = _useTreeViewContext.replace,
      rootRef = _useTreeViewContext.rootRef,
      selection = _useTreeViewContext.selection,
      selectionMode = _useTreeViewContext.selectionMode,
      toggle = _useTreeViewContext.toggle;

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      focus = _useState2[0],
      setFocus = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = _slicedToArray(_useState3, 2),
      loading = _useState4[0],
      setLoading = _useState4[1];

  var _useDnD = (0, _DragAndDrop.useDnD)(),
      mode = _useDnD.mode;

  var item = (0, _useItem.useItem)();
  var clickCapturedRef = (0, _react.useRef)(false);
  var api = (0, _context.useAPI)();
  var load = api[2];

  var _React$Children$toArr = _react.default.Children.toArray(children),
      _React$Children$toArr2 = _toArray(_React$Children$toArr),
      left = _React$Children$toArr2[0],
      right = _React$Children$toArr2[1],
      otherElements = _React$Children$toArr2.slice(2);

  var group = // @ts-ignore
  (right === null || right === void 0 ? void 0 : (_right$type = right.type) === null || _right$type === void 0 ? void 0 : _right$type.displayName) === 'ClayTreeViewGroup' ? right : null;
  (0, _react.useEffect)(function () {
    if (focus) {
      var onClick = function onClick() {
        if (!clickCapturedRef.current) {
          setFocus(false);
        }

        clickCapturedRef.current = false;
      };

      document.addEventListener('focus', onClick, true);
      document.addEventListener('mousedown', onClick);
      return function () {
        document.removeEventListener('focus', onClick, true);
        document.removeEventListener('mousedown', onClick);
      };
    }
  }, [focus]);
  var loadMore = (0, _react.useCallback)(function () {
    if (group) {
      return;
    }

    var promise = load.loadMore(item.key, item, true);

    if (promise) {
      setLoading(true);
      promise.then(function () {
        return setLoading(false);
      });
    }
  }, [item, group, load.loadMore]);

  var hasItemStack = typeof left !== 'string' && group && /*#__PURE__*/_react.default.isValidElement(left);

  var itemStackProps = hasItemStack ? left.props : {}; // The ownership of TreeView properties changes according to the component
  // declaration that helps in inferring the visual intuition of which
  // component is Node.

  var propsOwnership = group ? 'item' : 'node';
  var itemProps = propsOwnership === 'item' ? otherProps : {};
  var nodeProps = propsOwnership === 'node' ? otherProps : {};
  var hasChildren = nestedKey && item[nestedKey] && item[nestedKey].length > 0;
  var isExpand = expandable || itemStackProps.expandable || (childrenRoot.current ? hasChildren : group);
  var focusWithinProps = (0, _aria.useFocusWithin)({
    disabled: itemStackProps.disabled || nodeProps.disabled || mode === 'keyboard',
    id: item.key
  });
  var labelId = (0, _shared.useId)();
  var ariaOwns = (0, _shared.useId)();
  var isNonDraggrable = itemStackProps.draggable === false || nodeProps.draggable;

  if (!group && nestedKey && item[nestedKey] && childrenRoot.current) {
    return /*#__PURE__*/_react.default.cloneElement(childrenRoot.current.apply(childrenRoot, [(0, _Collection.removeItemInternalProps)(item)].concat(_toConsumableArray(api))), {
      actions: actions,
      isDragging: isDragging,
      overPosition: overPosition,
      overTarget: overTarget,
      ref: ref
    });
  }

  return /*#__PURE__*/_react.default.createElement(SpacingContext.Provider, {
    value: spacing + 24
  }, /*#__PURE__*/_react.default.createElement("li", _extends({}, itemProps, {
    className: (0, _classnames.default)('treeview-item', itemProps.className, {
      'treeview-item-dragging': isDragging
    }),
    role: "none"
  }), /*#__PURE__*/_react.default.createElement(ItemIndicator, {
    labelId: labelId,
    target: {
      dropPosition: 'top',
      key: item.key
    }
  }), /*#__PURE__*/_react.default.createElement("div", _extends({}, itemStackProps, nodeProps, focusWithinProps, {
    "aria-expanded": group ? expandedKeys.has(item.key) : undefined,
    "aria-labelledby": labelId,
    "aria-owns": ariaOwns,
    className: (0, _classnames.default)('treeview-link', itemStackProps.className, nodeProps.className, {
      active: selectionMode === 'single' && selection.selectedKeys.has(item.key) || itemStackProps.active || nodeProps.active,
      collapsed: group && expandedKeys.has(item.key),
      disabled: itemStackProps.disabled || nodeProps.disabled,
      focus: focus,
      'treeview-dropping-middle': overTarget && overPosition === 'middle',
      'treeview-no-hover': itemStackProps.noHover || nodeProps.noHover
    }),
    "data-dnd": dragAndDrop ? !isNonDraggrable : undefined,
    "data-dnd-dropping": overTarget && overPosition ? 'true' : undefined,
    "data-id": typeof item.key === 'number' ? "number,".concat(item.key) : "string,".concat(item.key),
    disabled: itemStackProps.disabled || nodeProps.disabled,
    onBlur: function onBlur(event) {
      var _item$itemRef$current;

      if (actions && event.relatedTarget && !((_item$itemRef$current = item.itemRef.current) !== null && _item$itemRef$current !== void 0 && _item$itemRef$current.contains(event.relatedTarget))) {
        setFocus(false);
      }
    },
    onClick: function onClick(event) {
      var _item$itemRef$current2;

      if (itemStackProps.disabled || nodeProps.disabled) {
        return;
      } // Any click that happened outside the item does not trigger the
      // node expansion. For example click on a DropDown item.


      if (!((_item$itemRef$current2 = item.itemRef.current) !== null && _item$itemRef$current2 !== void 0 && _item$itemRef$current2.contains(event.target))) {
        return;
      }

      if (hasItemStack && itemStackProps.onClick) {
        itemStackProps.onClick(event);
      }

      if (nodeProps.onClick) {
        nodeProps.onClick(event);
      }

      if (event.defaultPrevented) {
        return;
      } // event.detail it has no type but is an existing property of the
      // element to know how many clicks were triggered.
      // https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail
      // @ts-ignore


      if (expandDoubleClick && event.detail !== 2) {
        return;
      }

      if (selectionMode === 'single') {
        selection.toggleSelection(item.key);

        if (onSelect) {
          onSelect((0, _Collection.removeItemInternalProps)(item));
        }
      }

      if (group) {
        toggle(item.key);
      } else {
        loadMore();
      }
    },
    onFocus: function onFocus(event) {
      if (focusWithinProps.onFocus) {
        focusWithinProps.onFocus(event);
      }

      if (actions) {
        setFocus(true);
        clickCapturedRef.current = true;
      }
    },
    onKeyDown: function onKeyDown(event) {
      var _item$parentItemRef;

      if (itemStackProps.disabled || nodeProps.disabled) {
        return;
      }

      if (hasItemStack && itemStackProps.onKeyDown) {
        itemStackProps.onKeyDown(event);
      }

      if (nodeProps.onKeyDown) {
        nodeProps.onKeyDown(event);
      }

      if (event.defaultPrevented || event.key === _shared.Keys.Tab) {
        return;
      } // We call `preventDefault` after checking if it was ignored
      // because the behavior is different when the developer sets
      // `onKeyDown` it can ignore the default behavior of the browser
      // and the default behavior of the TreeView when this is not done
      // by default we ignore the default browser behavior by default.


      event.preventDefault();
      var key = event.key;

      switch (key) {
        case _shared.Keys.Left:
          if (!close(item.key) && (_item$parentItemRef = item.parentItemRef) !== null && _item$parentItemRef !== void 0 && _item$parentItemRef.current) {
            item.parentItemRef.current.focus();
          }

          break;

        case _shared.Keys.Right:
          if (!group) {
            var promise = load.loadMore(item.key, item);

            if (promise) {
              setLoading(true);
              promise.then(function () {
                return setLoading(false);
              });
            } else {
              return;
            }
          }

          if (!open(item.key) && item.itemRef.current) {
            var _item$itemRef$current3;

            var _group = (_item$itemRef$current3 = item.itemRef.current.parentElement) === null || _item$itemRef$current3 === void 0 ? void 0 : _item$itemRef$current3.querySelector('.treeview-group');

            var firstItemElement = _group === null || _group === void 0 ? void 0 : _group.querySelector('.treeview-link:not(.disabled)');
            firstItemElement === null || firstItemElement === void 0 ? void 0 : firstItemElement.focus();
          } else {
            var _item$itemRef$current4;

            (_item$itemRef$current4 = item.itemRef.current) === null || _item$itemRef$current4 === void 0 ? void 0 : _item$itemRef$current4.focus();
          }

          break;

        case _shared.Keys.Backspace:
        case _shared.Keys.Del:
          {
            var _item$parentItemRef$c;

            remove(item.indexes);
            (_item$parentItemRef$c = item.parentItemRef.current) === null || _item$parentItemRef$c === void 0 ? void 0 : _item$parentItemRef$c.focus();
            break;
          }

        case _shared.Keys.Home:
          {
            var _rootRef$current;

            var firstListElement = (_rootRef$current = rootRef.current) === null || _rootRef$current === void 0 ? void 0 : _rootRef$current.firstElementChild;
            var linkElement = firstListElement.firstElementChild;
            linkElement.focus();
            break;
          }

        case _shared.Keys.End:
          {
            var _rootRef$current2;

            var lastListElement = (_rootRef$current2 = rootRef.current) === null || _rootRef$current2 === void 0 ? void 0 : _rootRef$current2.lastElementChild;
            var _linkElement = lastListElement.firstElementChild;

            _linkElement.focus();

            break;
          }

        case _shared.Keys.Spacebar:
          {
            selection.toggleSelection(item.key);

            if (onSelect) {
              onSelect((0, _Collection.removeItemInternalProps)(item));
            }

            break;
          }

        case _shared.Keys.R.toLowerCase():
        case _shared.Keys.R:
        case _shared.Keys.F2:
          {
            if (onRenameItem) {
              onRenameItem(_objectSpread({}, item)).then(function (newItem) {
                var _item$itemRef$current5;

                replace(item.indexes, _objectSpread(_objectSpread({}, newItem), {}, {
                  index: item['index'],
                  indexes: item.indexes,
                  itemRef: item.itemRef,
                  key: item.key,
                  parentItemRef: item.parentItemRef
                }));
                (_item$itemRef$current5 = item.itemRef.current) === null || _item$itemRef$current5 === void 0 ? void 0 : _item$itemRef$current5.focus();
              }).catch(function (error) {
                console.error(error);
              });
            }

            break;
          }

        default:
          break;
      }
    },
    onMouseDown: function onMouseDown() {
      clickCapturedRef.current = true;
    },
    onTouchStart: function onTouchStart() {
      clickCapturedRef.current = true;
    },
    ref: isNonDraggrable ? undefined : ref,
    role: "treeitem",
    style: _objectSpread(_objectSpread(_objectSpread({}, (_itemStackProps$style = itemStackProps === null || itemStackProps === void 0 ? void 0 : itemStackProps.style) !== null && _itemStackProps$style !== void 0 ? _itemStackProps$style : {}), (_nodeProps$style = nodeProps === null || nodeProps === void 0 ? void 0 : nodeProps.style) !== null && _nodeProps$style !== void 0 ? _nodeProps$style : {}), {}, {
      paddingLeft: "".concat(spacing + (isExpand || loading ? 0 : 24), "px")
    })
  }), /*#__PURE__*/_react.default.createElement(ItemIndicator, {
    labelId: labelId,
    target: {
      dropPosition: 'middle',
      key: item.key
    }
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: "c-inner",
    style: {
      marginLeft: "-".concat(spacing + (isExpand || loading ? 0 : 24), "px")
    },
    tabIndex: -2
  }, typeof left === 'string' && !right ? /*#__PURE__*/_react.default.createElement(_layout.default.ContentRow, null, !isNonDraggrable && /*#__PURE__*/_react.default.createElement(Drag, {
    labelId: labelId,
    tabIndex: focusWithinProps.tabIndex
  }), /*#__PURE__*/_react.default.createElement(_layout.default.ContentCol, {
    expand: true
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "component-text",
    id: labelId,
    tabIndex: -1
  }, left)), actions && /*#__PURE__*/_react.default.createElement(Actions, {
    tabIndex: focusWithinProps.tabIndex
  }, actions)) : group ? /*#__PURE__*/_react.default.cloneElement(left, {
    actions: actions,
    expandable: isExpand,
    isNonDraggrable: isNonDraggrable,
    labelId: labelId,
    onClick: undefined,
    onLoadMore: !group ? loadMore : undefined,
    tabIndex: focusWithinProps.tabIndex
  }) : /*#__PURE__*/_react.default.createElement(TreeViewItemStack, {
    actions: actions,
    disabled: nodeProps.disabled,
    expandable: isExpand,
    isNonDraggrable: isNonDraggrable,
    labelId: labelId,
    loading: loading,
    onLoadMore: !group ? loadMore : undefined,
    tabIndex: focusWithinProps.tabIndex
  }, children))), /*#__PURE__*/_react.default.createElement(ItemIndicator, {
    labelId: labelId,
    target: {
      dropPosition: 'bottom',
      key: item.key
    }
  }), group && /*#__PURE__*/_react.default.cloneElement(group, {
    'aria-labelledby': labelId,
    id: ariaOwns
  }), left && group && Boolean(otherElements.length) && /*#__PURE__*/_react.default.createElement("div", {
    style: {
      paddingLeft: "".concat(spacing + 24, "px")
    }
  }, otherElements)));
});

exports.TreeViewItem = TreeViewItem;
TreeViewItem.displayName = 'ClayTreeViewItem';

function Expander(_ref2) {
  var expanderIcons = _ref2.expanderIcons;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, expanderIcons !== null && expanderIcons !== void 0 && expanderIcons.close ? expanderIcons.close : /*#__PURE__*/_react.default.createElement(_icon.default, {
    symbol: "angle-down"
  }), expanderIcons !== null && expanderIcons !== void 0 && expanderIcons.open ? /*#__PURE__*/_react.default.cloneElement(expanderIcons.open, {
    className: 'component-expanded-d-none'
  }) : /*#__PURE__*/_react.default.createElement(_icon.default, {
    className: "component-expanded-d-none",
    symbol: "angle-right"
  }));
}

function TreeViewItemStack(_ref3) {
  var actions = _ref3.actions,
      children = _ref3.children,
      disabled = _ref3.disabled,
      _ref3$expandable = _ref3.expandable,
      expandable = _ref3$expandable === void 0 ? false : _ref3$expandable,
      expanderDisabled = _ref3.expanderDisabled,
      isNonDraggrable = _ref3.isNonDraggrable,
      labelId = _ref3.labelId,
      _ref3$loading = _ref3.loading,
      loading = _ref3$loading === void 0 ? false : _ref3$loading,
      onLoadMore = _ref3.onLoadMore,
      tabIndex = _ref3.tabIndex,
      otherProps = _objectWithoutProperties(_ref3, _excluded2);

  var _useTreeViewContext2 = (0, _context.useTreeViewContext)(),
      expandOnCheck = _useTreeViewContext2.expandOnCheck,
      expandedKeys = _useTreeViewContext2.expandedKeys,
      expanderClassName = _useTreeViewContext2.expanderClassName,
      expanderIcons = _useTreeViewContext2.expanderIcons,
      onSelect = _useTreeViewContext2.onSelect,
      open = _useTreeViewContext2.open,
      selection = _useTreeViewContext2.selection,
      toggle = _useTreeViewContext2.toggle;

  var item = (0, _useItem.useItem)();

  var childrenCount = _react.default.Children.count(children);

  return /*#__PURE__*/_react.default.createElement(_layout.default.ContentRow, otherProps, expandable && !loading && /*#__PURE__*/_react.default.createElement(_layout.default.ContentCol, null, /*#__PURE__*/_react.default.createElement(_button.default, {
    "aria-controls": "".concat(item.key),
    "aria-expanded": expandedKeys.has(item.key),
    className: (0, _classnames.default)('component-expander', expanderClassName, {
      collapsed: expandedKeys.has(item.key)
    }),
    disabled: typeof expanderDisabled === 'undefined' ? disabled : expanderDisabled,
    displayType: null,
    monospaced: true,
    onClick: function onClick(event) {
      event.stopPropagation();

      if (onLoadMore) {
        onLoadMore();
      } else {
        toggle(item.key);
      }
    },
    tabIndex: -1
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "c-inner",
    tabIndex: -2
  }, /*#__PURE__*/_react.default.createElement(Expander, {
    expanderIcons: expanderIcons
  })))), loading && /*#__PURE__*/_react.default.createElement(_layout.default.ContentCol, {
    className: "btn-monospaced"
  }, /*#__PURE__*/_react.default.createElement(_loadingIndicator.default, {
    small: true
  })), !isNonDraggrable && /*#__PURE__*/_react.default.createElement(Drag, {
    labelId: labelId,
    tabIndex: tabIndex
  }), _react.default.Children.map(children, function (child, index) {
    var content = child;

    if (!content) {
      return null;
    }

    if (typeof child === 'string' || typeof child === 'number' || // @ts-ignore
    (child === null || child === void 0 ? void 0 : child.type.displayName) === 'Text') {
      content = /*#__PURE__*/_react.default.createElement("span", {
        className: "component-text",
        id: labelId,
        tabIndex: -1
      }, child); // @ts-ignore
    } else if ((child === null || child === void 0 ? void 0 : child.type.displayName) === 'ClayIcon') {
      content = /*#__PURE__*/_react.default.createElement("div", {
        className: "component-icon"
      }, child); // @ts-ignore
    } else if ((child === null || child === void 0 ? void 0 : child.type.displayName) === 'ClayCheckbox') {
      content = /*#__PURE__*/_react.default.cloneElement(child, {
        'aria-labelledby': labelId,
        checked: selection.selectedKeys.has(item.key),
        disabled: loading || disabled,
        indeterminate: selection.isIndeterminate(item.key),
        onChange: function onChange(event) {
          var onChange = child.props.onChange;

          if (onChange) {
            onChange(event);
          }

          if (event.defaultPrevented) {
            return;
          }

          selection.toggleSelection(item.key);

          if (onSelect) {
            onSelect((0, _Collection.removeItemInternalProps)(item));
          }

          if (expandOnCheck) {
            open(item.key);
          }
        },
        onClick: function onClick(event) {
          event.stopPropagation();
          var onClick = child.props.onClick;

          if (onClick) {
            onClick(event);
          }
        }
      });
    } else {
      var _props;

      content = /*#__PURE__*/_react.default.cloneElement(child, _objectSpread(_objectSpread({}, child === null || child === void 0 ? void 0 : child.props), {}, {
        id: (child === null || child === void 0 ? void 0 : (_props = child.props) === null || _props === void 0 ? void 0 : _props.id) || labelId
      }));
    }

    return /*#__PURE__*/_react.default.createElement(_layout.default.ContentCol, {
      expand: index === childrenCount - 1
    }, content);
  }), actions && /*#__PURE__*/_react.default.createElement(Actions, {
    tabIndex: tabIndex
  }, actions));
}

TreeViewItemStack.displayName = 'TreeViewItemStack';

function Actions(_ref4) {
  var children = _ref4.children,
      tabIndex = _ref4.tabIndex;

  var childrenArray = _react.default.Children.toArray(children.type === _react.default.Fragment ? children.props.children : children);

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, childrenArray.map(function (child, index) {
    if (child.type.displayName === 'ClayButton') {
      return /*#__PURE__*/_react.default.createElement(_layout.default.ContentCol, {
        key: index
      }, /*#__PURE__*/_react.default.cloneElement(child, {
        className: (0, _classnames.default)('component-action quick-action-item', child.props.className),
        onClick: function onClick(event) {
          event.stopPropagation();

          if (child.props.onClick) {
            child.props.onClick(event);
          }
        },
        onKeyDown: function onKeyDown(event) {
          if (event.key === _shared.Keys.Enter || event.key === _shared.Keys.Spacebar) {
            event.stopPropagation();
          }
        },
        tabIndex: tabIndex
      }));
    } else if (child.type.displayName === 'ClayDropDownWithItems') {
      return /*#__PURE__*/_react.default.createElement(_layout.default.ContentCol, {
        key: index
      }, /*#__PURE__*/_react.default.cloneElement(child, {
        trigger: /*#__PURE__*/_react.default.cloneElement(child.props.trigger, {
          className: (0, _classnames.default)('component-action quick-action-item', child.props.trigger.props.className),
          onClick: function onClick(event) {
            event.stopPropagation();

            if (child.props.trigger.props.onClick) {
              child.props.trigger.props.onClick(event);
            }
          },
          onKeyDown: function onKeyDown(event) {
            if (event.key === _shared.Keys.Enter || event.key === _shared.Keys.Spacebar) {
              event.stopPropagation();
            }
          },
          tabIndex: tabIndex
        })
      }));
    }

    return child;
  }));
}

Actions.displayName = 'TreeViewItemActions';

function ItemIndicator(_ref5) {
  var _classNames;

  var labelId = _ref5.labelId,
      target = _ref5.target;

  var _useDnD2 = (0, _DragAndDrop.useDnD)(),
      currentTarget = _useDnD2.currentTarget,
      dragDropDescribedBy = _useDnD2.dragDropDescribedBy,
      messages = _useDnD2.messages,
      mode = _useDnD2.mode,
      position = _useDnD2.position;

  var indicatorRef = (0, _react.useRef)(null);
  var id = (0, _shared.useId)();
  (0, _react.useEffect)(function () {
    if (mode === 'keyboard' && indicatorRef.current && currentTarget === target.key && target.dropPosition === position) {
      indicatorRef.current.focus();
    }
  }, [currentTarget, target]);

  if (!mode) {
    return null;
  }

  if (mode === 'mouse') {
    return /*#__PURE__*/_react.default.createElement("div", {
      "aria-hidden": "true",
      className: (0, _classnames.default)({
        'treeview-dropping-indicator-bottom': target.dropPosition === 'bottom',
        'treeview-dropping-indicator-over': currentTarget === target.key && target.dropPosition === position,
        'treeview-dropping-indicator-top': target.dropPosition === 'top'
      }),
      ref: indicatorRef,
      role: "button",
      tabIndex: -1
    });
  }

  var Component = target.dropPosition !== 'middle' ? 'div' : _liveAnnouncer.VisuallyHidden;
  return /*#__PURE__*/_react.default.createElement(Component, {
    "aria-describedby": dragDropDescribedBy,
    "aria-hidden": mode !== 'keyboard' ? true : undefined,
    "aria-label": (0, _classnames.default)((_classNames = {}, _defineProperty(_classNames, messages.dropOn, target.dropPosition === 'middle'), _defineProperty(_classNames, messages.insertAfter, target.dropPosition === 'bottom'), _defineProperty(_classNames, messages.insertBefore, target.dropPosition === 'top'), _classNames)),
    "aria-labelledby": "".concat(id, " ").concat(labelId),
    "aria-roledescription": messages.dropIndicator,
    className: (0, _classnames.default)({
      'treeview-dropping-indicator-bottom': target.dropPosition === 'bottom',
      'treeview-dropping-indicator-over': currentTarget === target.key && target.dropPosition === position,
      'treeview-dropping-indicator-top': target.dropPosition === 'top'
    }),
    id: id,
    ref: indicatorRef,
    role: "button",
    tabIndex: currentTarget === target.key && target.dropPosition === position ? 0 : -1
  });
}

function Drag(_ref6) {
  var labelId = _ref6.labelId,
      tabIndex = _ref6.tabIndex;

  var _useTreeViewContext3 = (0, _context.useTreeViewContext)(),
      dragAndDrop = _useTreeViewContext3.dragAndDrop;

  var _useDnD3 = (0, _DragAndDrop.useDnD)(),
      currentDrag = _useDnD3.currentDrag,
      dragCancelDescribedBy = _useDnD3.dragCancelDescribedBy,
      dragDescribedBy = _useDnD3.dragDescribedBy,
      messages = _useDnD3.messages,
      mode = _useDnD3.mode,
      onCancel = _useDnD3.onCancel,
      onDragStart = _useDnD3.onDragStart;

  var item = (0, _useItem.useItem)();
  var isFocusVisible = (0, _shared.useFocusVisible)();
  var dragButtonId = (0, _shared.useId)();

  if (!dragAndDrop) {
    return null;
  }

  return /*#__PURE__*/_react.default.createElement(_layout.default.ContentCol, null, /*#__PURE__*/_react.default.createElement(_button.default, {
    "aria-describedby": currentDrag === item.key ? dragCancelDescribedBy : dragDescribedBy,
    "aria-label": messages.dragItem,
    "aria-labelledby": "".concat(dragButtonId, " ").concat(labelId),
    "data-draggable": currentDrag === item.key,
    displayType: null,
    draggable: true,
    id: dragButtonId,
    monospaced: true,
    onClick: function onClick(event) {
      event.stopPropagation();

      if (!isFocusVisible) {
        return;
      }

      if (mode === 'keyboard') {
        onCancel();
      } else {
        onDragStart('keyboard', item.key);
      }
    },
    onKeyDown: function onKeyDown(event) {
      if (event.key === _shared.Keys.Enter || event.key === _shared.Keys.Spacebar) {
        event.stopPropagation();
      }
    },
    tabIndex: currentDrag === item.key || tabIndex === 0 || !isFocusVisible ? 0 : -1
  }, isFocusVisible ? /*#__PURE__*/_react.default.createElement(_icon.default, {
    "aria-hidden": true,
    symbol: "drag"
  }) : /*#__PURE__*/_react.default.createElement("div", {
    className: "c-inner",
    tabIndex: -2
  }, /*#__PURE__*/_react.default.createElement(_icon.default, {
    "aria-hidden": true,
    symbol: "drag"
  }))));
}