"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TreeView = TreeView;

var _shared = require("@clayui/shared");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _reactDnd = require("react-dnd");

var _reactDndHtml5Backend = require("react-dnd-html5-backend");

var _aria = require("../aria");

var _Collection = require("./Collection");

var _DragAndDrop = require("./DragAndDrop");

var _DragLayer = _interopRequireDefault(require("./DragLayer"));

var _TreeViewGroup = require("./TreeViewGroup");

var _TreeViewItem = require("./TreeViewItem");

var _context = require("./context");

var _useTree = require("./useTree");

var _excluded = ["children", "className", "defaultExpandedKeys", "defaultItems", "defaultSelectedKeys", "displayType", "dragAndDrop", "dragAndDropContext", "expandDoubleClick", "expandedKeys", "expanderClassName", "expanderIcons", "expandOnCheck", "indeterminate", "itemNameKey", "items", "messages", "nestedKey", "onExpandedChange", "onItemHover", "onItemMove", "onItemsChange", "onLoadMore", "onRenameItem", "onSelect", "onSelectionChange", "selectedKeys", "selectionHydrationMode", "selectionMode", "showExpanderOnHover"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var focusableElements = ['.treeview-link[tabindex]'];

var Application = function Application(_ref) {
  var children = _ref.children;
  return /*#__PURE__*/_react.default.createElement("div", {
    role: "application"
  }, children);
};

function TreeView(_ref2) {
  var _classNames;

  var children = _ref2.children,
      className = _ref2.className,
      defaultExpandedKeys = _ref2.defaultExpandedKeys,
      defaultItems = _ref2.defaultItems,
      defaultSelectedKeys = _ref2.defaultSelectedKeys,
      _ref2$displayType = _ref2.displayType,
      displayType = _ref2$displayType === void 0 ? 'light' : _ref2$displayType,
      _ref2$dragAndDrop = _ref2.dragAndDrop,
      dragAndDrop = _ref2$dragAndDrop === void 0 ? false : _ref2$dragAndDrop,
      _ref2$dragAndDropCont = _ref2.dragAndDropContext,
      dragAndDropContext = _ref2$dragAndDropCont === void 0 ? window : _ref2$dragAndDropCont,
      _ref2$expandDoubleCli = _ref2.expandDoubleClick,
      expandDoubleClick = _ref2$expandDoubleCli === void 0 ? false : _ref2$expandDoubleCli,
      expandedKeys = _ref2.expandedKeys,
      expanderClassName = _ref2.expanderClassName,
      expanderIcons = _ref2.expanderIcons,
      _ref2$expandOnCheck = _ref2.expandOnCheck,
      expandOnCheck = _ref2$expandOnCheck === void 0 ? false : _ref2$expandOnCheck,
      _ref2$indeterminate = _ref2.indeterminate,
      indeterminate = _ref2$indeterminate === void 0 ? true : _ref2$indeterminate,
      _ref2$itemNameKey = _ref2.itemNameKey,
      itemNameKey = _ref2$itemNameKey === void 0 ? 'name' : _ref2$itemNameKey,
      items = _ref2.items,
      messages = _ref2.messages,
      _ref2$nestedKey = _ref2.nestedKey,
      nestedKey = _ref2$nestedKey === void 0 ? 'children' : _ref2$nestedKey,
      onExpandedChange = _ref2.onExpandedChange,
      onItemHover = _ref2.onItemHover,
      onItemMove = _ref2.onItemMove,
      onItemsChange = _ref2.onItemsChange,
      onLoadMore = _ref2.onLoadMore,
      onRenameItem = _ref2.onRenameItem,
      onSelect = _ref2.onSelect,
      onSelectionChange = _ref2.onSelectionChange,
      selectedKeys = _ref2.selectedKeys,
      _ref2$selectionHydrat = _ref2.selectionHydrationMode,
      selectionHydrationMode = _ref2$selectionHydrat === void 0 ? 'hydrate-first' : _ref2$selectionHydrat,
      _ref2$selectionMode = _ref2.selectionMode,
      selectionMode = _ref2$selectionMode === void 0 ? 'single' : _ref2$selectionMode,
      _ref2$showExpanderOnH = _ref2.showExpanderOnHover,
      showExpanderOnHover = _ref2$showExpanderOnH === void 0 ? true : _ref2$showExpanderOnH,
      otherProps = _objectWithoutProperties(_ref2, _excluded);

  var rootRef = (0, _react.useRef)(null);
  var state = (0, _useTree.useTree)({
    defaultExpandedKeys: defaultExpandedKeys,
    defaultItems: defaultItems,
    defaultSelectedKeys: defaultSelectedKeys,
    expandedKeys: expandedKeys,
    indeterminate: indeterminate,
    items: items,
    nestedKey: nestedKey,
    onExpandedChange: onExpandedChange,
    onItemsChange: onItemsChange,
    onSelectionChange: onSelectionChange,
    selectedKeys: selectedKeys,
    selectionHydrationMode: selectionHydrationMode,
    selectionMode: selectionMode
  });
  var childrenRootRef = (0, _react.useRef)(typeof children === 'function' ? children : null);

  var context = _objectSpread({
    childrenRoot: childrenRootRef,
    dragAndDrop: dragAndDrop,
    expandDoubleClick: expandDoubleClick,
    expandOnCheck: expandOnCheck,
    expanderClassName: expanderClassName,
    expanderIcons: expanderIcons,
    nestedKey: nestedKey,
    onItemHover: onItemHover,
    onItemMove: onItemMove,
    onLoadMore: onLoadMore,
    onRenameItem: onRenameItem,
    onSelect: onSelect,
    rootRef: rootRef,
    selectionMode: selectionMode,
    showExpanderOnHover: showExpanderOnHover
  }, state);

  var _useNavigation = (0, _shared.useNavigation)({
    containerRef: rootRef,
    focusableElements: focusableElements,
    orientation: 'vertical',
    typeahead: true,
    visible: true
  }),
      navigationProps = _useNavigation.navigationProps;

  var Container = (0, _shared.isAppleDevice)() ? _react.default.Fragment : Application;
  return /*#__PURE__*/_react.default.createElement(Container, null, /*#__PURE__*/_react.default.createElement("ul", _extends({}, otherProps, navigationProps, {
    className: (0, _classnames.default)('treeview show-quick-actions-on-hover', className, (_classNames = {}, _defineProperty(_classNames, "treeview-".concat(displayType), displayType), _defineProperty(_classNames, 'show-component-expander-on-hover', showExpanderOnHover), _classNames)),
    ref: rootRef,
    role: "tree",
    tabIndex: -1
  }), /*#__PURE__*/_react.default.createElement(_reactDnd.DndProvider, {
    backend: _reactDndHtml5Backend.HTML5Backend,
    context: dragAndDropContext
  }, /*#__PURE__*/_react.default.createElement(_context.TreeViewContext.Provider, {
    value: context
  }, /*#__PURE__*/_react.default.createElement(_DragAndDrop.DragAndDropProvider, {
    messages: messages,
    nestedKey: nestedKey,
    onItemHover: onItemHover,
    onItemMove: onItemMove,
    rootRef: rootRef
  }, /*#__PURE__*/_react.default.createElement(_aria.FocusWithinProvider, {
    containerRef: rootRef,
    focusableElements: focusableElements
  }, /*#__PURE__*/_react.default.createElement(_Collection.Collection, {
    items: state.items
  }, children), /*#__PURE__*/_react.default.createElement(_DragLayer.default, {
    itemNameKey: itemNameKey
  })))))));
}

TreeView.Group = _TreeViewGroup.TreeViewGroup;
TreeView.Item = _TreeViewItem.TreeViewItem;
TreeView.ItemStack = _TreeViewItem.TreeViewItemStack;