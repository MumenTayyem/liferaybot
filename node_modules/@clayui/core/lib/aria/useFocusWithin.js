"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FocusWithinProvider = FocusWithinProvider;
exports.useFocusWithin = useFocusWithin;

var _shared = require("@clayui/shared");

var _react = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var FocusContext = /*#__PURE__*/_react.default.createContext({});

function getId(element) {
  var _split = element.getAttribute('data-id').split(','),
      _split2 = _slicedToArray(_split, 2),
      type = _split2[0],
      id = _split2[1];

  return type === 'number' ? Number(id) : id;
}

function FocusWithinProvider(_ref) {
  var children = _ref.children,
      containerRef = _ref.containerRef,
      focusableElements = _ref.focusableElements;

  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      focusId = _useState2[0],
      setFocusId = _useState2[1];

  (0, _react.useEffect)(function () {
    // TODO: Get this information using the collection API
    var item = (0, _shared.getFocusableList)(containerRef, focusableElements)[0];

    if (!item) {
      return;
    }

    setFocusId(getId(item));
  }, []); // Revalidates the focus if the item no longer exists in the list.

  (0, _react.useEffect)(function () {
    if (!focusId) {
      return;
    } // TODO: Get this information using the collection API


    var items = (0, _shared.getFocusableList)(containerRef, focusableElements);
    var hasItem = items.find(function (item) {
      return focusId === getId(item);
    });

    if (!hasItem && items.length) {
      setFocusId(getId(items[0]));
    }
  }, [children]);
  return /*#__PURE__*/_react.default.createElement(FocusContext.Provider, {
    value: {
      focusId: focusId,
      onFocusChange: setFocusId
    }
  }, children);
}

function useFocusWithin(_ref2) {
  var disabled = _ref2.disabled,
      id = _ref2.id,
      onFocusChanged = _ref2.onFocusChange;

  var _useContext = (0, _react.useContext)(FocusContext),
      focusId = _useContext.focusId,
      onFocusChange = _useContext.onFocusChange;

  var onFocus = (0, _react.useCallback)(function onFocusInner(event) {
    if (focusId !== id) {
      event.stopPropagation();
      onFocusChange(id);

      if (onFocusChanged) {
        onFocusChanged(true);
      }
    }
  }, [focusId]);
  var onBlur = (0, _react.useCallback)(function onFocusInner() {
    if (onFocusChanged) {
      onFocusChanged(false);
    }
  }, [focusId]);
  return (0, _react.useMemo)(function () {
    if (disabled) {
      return {
        tabIndex: -1
      };
    }

    return {
      onBlur: onBlur,
      onFocus: onFocus,
      tabIndex: focusId === id ? 0 : -1
    };
  }, [focusId, onFocus, onBlur]);
}