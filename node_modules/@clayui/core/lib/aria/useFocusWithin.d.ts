/**
 * SPDX-FileCopyrightText: Â© 2023 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: BSD-3-Clause
 */
import React from 'react';
declare type Props<T> = {
    children: React.ReactNode;
    containerRef: React.RefObject<T>;
    focusableElements: Array<string>;
};
export declare function FocusWithinProvider<T extends HTMLElement>({ children, containerRef, focusableElements, }: Props<T>): JSX.Element;
declare type FocusWithinProps = {
    id: React.Key;
    disabled: boolean;
    onFocusChange?: (isFocused: boolean) => void;
};
export declare function useFocusWithin({ disabled, id, onFocusChange: onFocusChanged, }: FocusWithinProps): {
    tabIndex: number;
    onBlur?: undefined;
    onFocus?: undefined;
} | {
    onBlur: () => void;
    onFocus: <T>(event: React.FocusEvent<T>) => void;
    tabIndex: number;
};
export {};
