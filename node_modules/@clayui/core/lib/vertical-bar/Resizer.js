"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Resizer = Resizer;

var _shared = require("@clayui/shared");

var _react = _interopRequireWildcard(require("react"));

var _context = require("./context");

var _excluded = ["nodeRef"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var MAIN_MOUSE_BUTTON = 0;
var keyDownCounter = 0;

function Resizer(_ref) {
  var nodeRef = _ref.nodeRef,
      otherProps = _objectWithoutProperties(_ref, _excluded);

  var _useContext = (0, _react.useContext)(_context.VerticalBarContext),
      onPanelWidthChange = _useContext.onPanelWidthChange,
      panelWidthMax = _useContext.panelWidthMax,
      panelWidthMin = _useContext.panelWidthMin,
      position = _useContext.position;

  var positionLeft = position === 'left';

  var getStartWidth = function getStartWidth() {
    var _nodeRef$current;

    return (nodeRef === null || nodeRef === void 0 ? void 0 : (_nodeRef$current = nodeRef.current) === null || _nodeRef$current === void 0 ? void 0 : _nodeRef$current.offsetWidth) || 320;
  };

  var decreasePanelWidth = function decreasePanelWidth() {
    var delta = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    var startWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getStartWidth();
    var width = Math.round(startWidth - delta);

    if (width > panelWidthMin - 100 && width < panelWidthMin) {
      onPanelWidthChange(panelWidthMin);
    } else if (width > panelWidthMin) {
      onPanelWidthChange(width);
    }
  };

  var increasePanelWidth = function increasePanelWidth() {
    var delta = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    var startWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getStartWidth();
    var width = Math.round(startWidth + delta);

    if (width > panelWidthMax && width < panelWidthMax + 100) {
      onPanelWidthChange(panelWidthMax);
    } else if (width < panelWidthMax) {
      onPanelWidthChange(width);
    }
  };

  return /*#__PURE__*/_react.default.createElement("div", _extends({}, otherProps, {
    onKeyDown: function onKeyDown(event) {
      var delta = keyDownCounter > 7 ? 10 : 1;
      keyDownCounter++;

      switch (event.key) {
        case _shared.Keys.Down:
          {
            decreasePanelWidth(delta);
            break;
          }

        case _shared.Keys.Left:
          {
            if (positionLeft) {
              decreasePanelWidth(delta);
            } else {
              increasePanelWidth(delta);
            }

            break;
          }

        case _shared.Keys.Right:
          {
            if (positionLeft) {
              increasePanelWidth(delta);
            } else {
              decreasePanelWidth(delta);
            }

            break;
          }

        case _shared.Keys.Up:
          {
            increasePanelWidth(delta);
            break;
          }

        default:
          {
            break;
          }
      }
    },
    onKeyUp: function onKeyUp() {
      keyDownCounter = 0;
    },
    onPointerDown: function onPointerDown(event) {
      var startWidth = getStartWidth();
      var startXPos = event.pageX;

      function onResizerMove(event) {
        var delta = Math.abs(event.pageX - startXPos);

        if (event.pageX >= startXPos && positionLeft || event.pageX < startXPos && !positionLeft) {
          increasePanelWidth(delta, startWidth);
        } else if (event.pageX < startXPos && positionLeft || event.pageX >= startXPos && !positionLeft) {
          decreasePanelWidth(delta, startWidth);
        }
      }

      function removeResizerEvents() {
        document.removeEventListener('pointermove', onResizerMove);
        document.removeEventListener('pointerup', removeResizerEvents);
      }

      if (event.button === MAIN_MOUSE_BUTTON) {
        document.addEventListener('pointermove', onResizerMove);
        document.addEventListener('pointerup', removeResizerEvents);
      }
    },
    role: "separator",
    tabIndex: 0
  }));
}