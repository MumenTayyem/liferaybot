"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCollection = useCollection;
exports.useCollectionKeys = useCollectionKeys;

var _shared = require("@clayui/shared");

var _react = _interopRequireWildcard(require("react"));

var _utils = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var CollectionContext = /*#__PURE__*/_react.default.createContext({});

var SECTION_NAMES = ['Group', 'Section'];

function getItemId(value) {
  return _typeof(value) === 'object' ? value['id'] : value;
}

function useCollection(_ref) {
  var children = _ref.children,
      _ref$connectNested = _ref.connectNested,
      connectNested = _ref$connectNested === void 0 ? true : _ref$connectNested,
      exclude = _ref.exclude,
      filter = _ref.filter,
      filterKey = _ref.filterKey,
      forceDeepRootUpdate = _ref.forceDeepRootUpdate,
      ItemContainer = _ref.itemContainer,
      items = _ref.items,
      notFound = _ref.notFound,
      parentKey = _ref.parentKey,
      _ref$passthroughKey = _ref.passthroughKey,
      passthroughKey = _ref$passthroughKey === void 0 ? true : _ref$passthroughKey,
      publicApi = _ref.publicApi,
      _ref$suppressTextValu = _ref.suppressTextValueWarning,
      suppressTextValueWarning = _ref$suppressTextValu === void 0 ? true : _ref$suppressTextValu,
      virtualizer = _ref.virtualizer,
      visibleKeys = _ref.visibleKeys;

  var _useContext = (0, _react.useContext)(CollectionContext),
      forceUpdate = _useContext.forceUpdate,
      parentLayout = _useContext.layout;

  var layoutRef = (0, _react.useRef)(new Map());
  var layoutKeysRef = (0, _react.useRef)(new Map());
  var keysRef = (0, _react.useRef)([]);

  var _useReducer = (0, _react.useReducer)(function (renders) {
    return renders + 1;
  }, 0),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      setForceUpdate = _useReducer2[1];

  var collectionId = (0, _shared.useId)();
  var layout = parentLayout !== null && parentLayout !== void 0 ? parentLayout : layoutRef;
  var performFilter = (0, _react.useCallback)(function (child) {
    if (!filter) {
      return false;
    }

    if (typeof child.props.children === 'string') {
      return !filter(child.props.children);
    }

    if (filterKey && child.props[filterKey]) {
      return !filter(child.props[filterKey]);
    }

    return false;
  }, [filter]);
  var performItemRender = (0, _react.useCallback)(function (child, key, index, item, props) {
    if (performFilter(child)) {
      return;
    }

    if (ItemContainer) {
      return /*#__PURE__*/_react.default.createElement(ItemContainer, {
        index: index,
        item: item,
        key: key,
        keyValue: key
      }, props ? /*#__PURE__*/_react.default.cloneElement(child, props) : child);
    }

    var hasChildNeedPassthroughKey = child.type.passthroughKey;
    return /*#__PURE__*/_react.default.cloneElement(child, _objectSpread(_objectSpread({
      key: key
    }, passthroughKey || hasChildNeedPassthroughKey ? _objectSpread({
      index: index,
      keyValue: key
    }, !suppressTextValueWarning ? {
      textValue: getTextValue(key, child, true)
    } : {}) : {}), props ? props : {}));
  }, [ItemContainer, performFilter]);
  var createItemsLayout = (0, _react.useCallback)(function (_ref2) {
    var children = _ref2.children,
        items = _ref2.items;
    keysRef.current = [];
    layoutKeysRef.current.clear(); // Pre-initialization of nested collections to mount the layout
    // structure.
    // TODO: Mount a structure with the children's information and cache it
    // to use when rendering the component.

    var callNestedChild = function callNestedChild(child) {
      if (child.type.displayName && SECTION_NAMES.includes(child.type.displayName)) {
        var _child$props = child.props,
            _children = _child$props.children,
            _items = _child$props.items;
        createItemsLayout({
          children: _children,
          items: _items
        });
      }
    };

    function registerItem(key, child, index) {
      if (performFilter(child)) {
        return;
      }

      if (child.type.displayName === 'Item') {
        layout.current.set(key, {
          index: index,
          instanceId: collectionId,
          value: getTextValue(key, child, suppressTextValueWarning)
        });
      }

      var prevKey = keysRef.current[keysRef.current.length - 1];
      keysRef.current.push(key);
      layoutKeysRef.current.set(key, {
        prevKey: prevKey
      });

      if (prevKey && layoutKeysRef.current.has(prevKey)) {
        layoutKeysRef.current.set(prevKey, _objectSpread(_objectSpread({}, layoutKeysRef.current.get(prevKey)), {}, {
          nextKey: key
        }));
      }
    }

    if (items && children instanceof Function) {
      for (var index = 0; index < items.length; index++) {
        var _child$key;

        var item = items[index];
        var publicItem = exclude && _typeof(item) === 'object' ? (0, _utils.excludeProps)(item, exclude) : item;
        var child = Array.isArray(publicApi) ? children.apply(void 0, [publicItem].concat(_toConsumableArray(publicApi))) : children(publicItem, index);
        callNestedChild(child);
        var key = (0, _utils.getKey)(index, (_child$key = child.key) !== null && _child$key !== void 0 ? _child$key : getItemId(item), parentKey); // TODO: We need support for items with just number and string types.

        if (_typeof(item) === 'object') {
          item['_key'] = key;
        }

        registerItem(key, child, index);
      }
    } else {
      _react.default.Children.forEach(children, function (child, index) {
        if (! /*#__PURE__*/_react.default.isValidElement(child)) {
          return;
        }

        callNestedChild(child);
        registerItem((0, _utils.getKey)(index, child.key, parentKey), child, index);
      });
    }
  }, [performFilter, publicApi]);
  var performCollectionRender = (0, _react.useCallback)(function (_ref3) {
    var children = _ref3.children,
        items = _ref3.items;

    if (children instanceof Function && items) {
      if (virtualizer) {
        return virtualizer.getVirtualItems().map(function (virtual) {
          var _child$key2;

          var item = items[virtual.index];
          var publicItem = exclude && _typeof(item) === 'object' ? (0, _utils.excludeProps)(item, exclude) : item;
          var child = Array.isArray(publicApi) ? children.apply(void 0, [publicItem].concat(_toConsumableArray(publicApi))) : children(publicItem, virtual.index);
          var props = {
            'data-index': virtual.index,
            ref: function ref(node) {
              virtualizer.measureElement(node);
              var ref = child.ref;

              if (typeof ref === 'function') {
                ref(node);
              }
            },
            style: {
              left: 0,
              position: 'absolute',
              top: 0,
              transform: "translateY(".concat(virtual.start, "px)"),
              width: '100%'
            }
          };
          return performItemRender(child, (0, _utils.getKey)(virtual.index, (_child$key2 = child.key) !== null && _child$key2 !== void 0 ? _child$key2 : getItemId(item), parentKey), virtual.index, item, props);
        });
      }

      return items.map(function (item, index) {
        var _child$key3;

        var publicItem = exclude && _typeof(item) === 'object' ? (0, _utils.excludeProps)(item, exclude) : item;
        var child = Array.isArray(publicApi) ? children.apply(void 0, [publicItem].concat(_toConsumableArray(publicApi))) : children(publicItem, index);
        var key = (0, _utils.getKey)(index, (_child$key3 = child.key) !== null && _child$key3 !== void 0 ? _child$key3 : getItemId(item), parentKey);

        if (visibleKeys && (Array.isArray(visibleKeys) && visibleKeys.length > 0 && !visibleKeys.includes(index) || visibleKeys instanceof Set && visibleKeys.size > 0 && !visibleKeys.has(key))) {
          return null;
        }

        return performItemRender(child, key, index, item);
      });
    }

    return _react.default.Children.map(children, function (child, index) {
      if (! /*#__PURE__*/_react.default.isValidElement(child)) {
        return null;
      }

      var key = (0, _utils.getKey)(index, child.key, parentKey);

      if (visibleKeys && (Array.isArray(visibleKeys) && visibleKeys.length > 0 && !visibleKeys.includes(index) || visibleKeys instanceof Set && visibleKeys.size > 0 && !visibleKeys.has(key))) {
        return null;
      }

      return performItemRender(child, key, index);
    });
  }, [performItemRender, publicApi, virtualizer === null || virtualizer === void 0 ? void 0 : virtualizer.getVirtualItems().length, visibleKeys]);
  var getItem = (0, _react.useCallback)(function (key) {
    return layout.current.get(key);
  }, []);
  var hasItem = (0, _react.useCallback)(function (key) {
    return layout.current.has(key);
  }, []);
  var getFirstItem = (0, _react.useCallback)(function () {
    var key = layout.current.keys().next().value;
    return _objectSpread({
      key: key
    }, layout.current.get(key));
  }, []);
  var getLastItem = (0, _react.useCallback)(function () {
    var key = Array.from(layout.current.keys()).pop();
    return _objectSpread({
      key: key
    }, layout.current.get(key));
  }, []);
  var getItems = (0, _react.useCallback)(function () {
    return Array.from(layout.current.keys());
  }, []);
  var getSize = (0, _react.useCallback)(function () {
    return layout.current.size;
  }, [collectionId]);
  var cleanUp = (0, _react.useCallback)(function () {
    layout.current.forEach(function (value, key) {
      if (value.instanceId === collectionId) {
        layout.current.delete(key);
      }
    });
  }, []); // We build the list data structure into the collection first so we can
  // consume the data later and only recompute when the data changes or
  // the children this avoids recalculating again on any rendering,
  // for example on a virtualized list.

  (0, _react.useMemo)(function () {
    if (!parentLayout) {
      cleanUp();
    } // Walks through the elements to compute the layout of the collection
    // before rendering the element. The data can be consumed later even
    // if the element is not rendered.


    createItemsLayout({
      children: children,
      items: items
    });
  }, [children, createItemsLayout, items]); // It builds the dynamic or static collection, done in two steps: Data and
  // Rendering, both go through the elements to get the data of each item.
  //
  // - Data: We get the data of the item to consume later
  // - Rendering: We render each element in memory

  var rendered = (0, _react.useMemo)(function () {
    var list = performCollectionRender({
      children: children,
      items: items
    });

    if (list.length === 0 && notFound) {
      return notFound;
    }

    return list;
  }, [children, performCollectionRender, items]); // Effect only called when the component is unmounted removing the layout
  // items that are rendered by the collection instance, effect only when
  // there are nested collections.

  (0, _react.useEffect)(function () {
    return function () {
      if (forceUpdate) {
        cleanUp();
        forceUpdate(null);
      }
    };
  }, []); // Effect forces the rerender of the root collection if it exists after
  // adding the items of the collection instance to the layout root.
  // NOTE: This update avoids the side effect of set the state in a `useMemo`
  // at render time then only being called when the collection is ready.

  (0, _react.useEffect)(function () {
    if (forceUpdate) {
      forceUpdate(null);
    }
  }, [children, createItemsLayout, performCollectionRender, items]);
  return {
    UNSAFE_virtualizer: virtualizer,
    collection: connectNested ? /*#__PURE__*/_react.default.createElement(CollectionContext.Provider, {
      value: {
        forceUpdate: forceDeepRootUpdate ? setForceUpdate : undefined,
        keys: layoutKeysRef,
        layout: layout
      }
    }, rendered) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, rendered),
    getFirstItem: getFirstItem,
    getItem: getItem,
    getItems: getItems,
    getLastItem: getLastItem,
    getSize: getSize,
    hasItem: hasItem,
    size: virtualizer ? virtualizer.getTotalSize() : undefined,
    virtualize: !!virtualizer
  };
}

function useCollectionKeys() {
  var _useContext2 = (0, _react.useContext)(CollectionContext),
      keys = _useContext2.keys;

  return keys;
}

function getTextValue(key, child, suppressTextValueWarning) {
  if (typeof child.props.children === 'string') {
    return child.props.children;
  }

  if (child.props.textValue) {
    return child.props.textValue;
  }

  if (!suppressTextValueWarning) {
    console.warn("Clay: <Item key=\"".concat(key, "\" /> with non-plain text content is not compatible with the type being selected. Please add a `textValue` prop."));
  }

  return '';
}