"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FocusMenu = FocusMenu;
exports.Menu = void 0;

var _shared = require("@clayui/shared");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _collection = require("../collection");

var _excluded = ["children"],
    _excluded2 = ["UNSAFE_focusableElements", "active", "alwaysClose", "as", "children", "className", "defaultActive", "disabled", "items", "onActiveChange", "role", "style", "trigger"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var List = /*#__PURE__*/_react.default.forwardRef(function List(_ref, ref) {
  var children = _ref.children,
      otherProps = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/_react.default.createElement("ul", _extends({}, otherProps, {
    className: "list-unstyled",
    ref: ref
  }), children);
});

function MenuInner(_ref2, ref) {
  var UNSAFE_focusableElements = _ref2.UNSAFE_focusableElements,
      externalActive = _ref2.active,
      _ref2$alwaysClose = _ref2.alwaysClose,
      alwaysClose = _ref2$alwaysClose === void 0 ? true : _ref2$alwaysClose,
      _ref2$as = _ref2.as,
      As = _ref2$as === void 0 ? 'div' : _ref2$as,
      children = _ref2.children,
      className = _ref2.className,
      defaultActive = _ref2.defaultActive,
      disabled = _ref2.disabled,
      items = _ref2.items,
      onActiveChange = _ref2.onActiveChange,
      _ref2$role = _ref2.role,
      role = _ref2$role === void 0 ? 'menu' : _ref2$role,
      style = _ref2.style,
      trigger = _ref2.trigger,
      otherProps = _objectWithoutProperties(_ref2, _excluded2);

  var portalRef = (0, _react.useRef)(null);
  var containerRef = (0, _react.useRef)(null);
  var menuRef = (0, _react.useRef)(null);
  var triggerRef = (0, _react.useRef)(null);
  (0, _react.useImperativeHandle)(ref, function () {
    return menuRef.current;
  }, []);

  var _useControlledState = (0, _shared.useControlledState)({
    defaultName: 'defaultActive',
    defaultValue: defaultActive,
    handleName: 'onActiveChange',
    name: 'active',
    onChange: onActiveChange,
    value: externalActive
  }),
      _useControlledState2 = _slicedToArray(_useControlledState, 2),
      active = _useControlledState2[0],
      setActive = _useControlledState2[1];

  var virtualizer = (0, _collection.useVirtual)({
    estimateSize: 32,
    items: items !== null && items !== void 0 ? items : [],
    parentRef: menuRef
  });
  var collection = (0, _collection.useCollection)({
    children: children,
    itemContainer: (0, _react.useCallback)(function (_ref3) {
      var children = _ref3.children,
          keyValue = _ref3.keyValue;
      return /*#__PURE__*/_react.default.cloneElement(children, {
        keyValue: keyValue,
        onClick: function onClick(event) {
          if (children.props.onClick) {
            children.props.onClick(event);
          }

          if (event.defaultPrevented) {
            return;
          }

          if (alwaysClose) {
            setActive(false);
          }
        },
        role: role === 'menu' ? 'menuitem' : 'option'
      });
    }, []),
    items: items,
    suppressTextValueWarning: false,
    virtualizer: items && items.length > 70 ? virtualizer : undefined
  });
  (0, _shared.useOverlayPosition)({
    alignmentByViewport: true,
    alignmentPosition: 5,
    autoBestAlign: true,
    isOpen: active,
    ref: menuRef,
    triggerRef: triggerRef
  }, [active, children]);

  var _useNavigation = (0, _shared.useNavigation)({
    activation: 'manual',
    collection: items && items.length > 70 ? collection : undefined,
    containerRef: menuRef,
    focusableElements: UNSAFE_focusableElements,
    loop: true,
    orientation: 'vertical',
    typeahead: true,
    visible: active
  }),
      navigationProps = _useNavigation.navigationProps;

  var onClose = (0, _react.useCallback)(function () {
    return setActive(false);
  }, []);
  var ariaControlsId = (0, _shared.useId)();
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "dropdown",
    ref: containerRef
  }, /*#__PURE__*/_react.default.cloneElement(trigger, {
    'aria-controls': active ? ariaControlsId : undefined,
    'aria-expanded': active,
    'aria-haspopup': 'true',
    className: (0, _classnames.default)('dropdown-toggle', trigger.props.className),
    disabled: disabled,
    onClick: function onClick(event) {
      if (trigger.props.onClick) {
        trigger.props.onClick(event);
      }

      setActive(!active);
    },
    onKeyDown: function onKeyDown(event) {
      if (trigger.props.onKeyDown) {
        trigger.props.onKeyDown(event);
      }

      switch (event.key) {
        case _shared.Keys.Spacebar:
          event.preventDefault();
          setActive(!active);
          break;

        case _shared.Keys.Up:
        case _shared.Keys.Down:
          {
            event.preventDefault();
            event.stopPropagation();

            if (!active) {
              setActive(true);
            }

            navigationProps.onKeyDown(event);
            break;
          }

        default:
          break;
      }
    },
    ref: function ref(node) {
      triggerRef.current = node; // Call the original ref, if any.

      var ref = trigger.ref;

      if (typeof ref === 'function') {
        ref(node);
      }
    }
  }), active && /*#__PURE__*/_react.default.createElement(_shared.Overlay, {
    isCloseOnInteractOutside: true,
    isKeyboardDismiss: true,
    isOpen: true,
    menuRef: menuRef,
    onClose: onClose,
    portalRef: portalRef,
    suppress: [menuRef, triggerRef],
    triggerRef: triggerRef
  }, /*#__PURE__*/_react.default.createElement("div", {
    ref: portalRef,
    role: "presentation"
  }, /*#__PURE__*/_react.default.createElement(As, {
    className: (0, _classnames.default)('dropdown-menu show', className),
    ref: menuRef,
    role: "presentation",
    style: style
  }, /*#__PURE__*/_react.default.createElement(FocusMenu, {
    onRender: function onRender() {
      // After a few milliseconds querying the elements in the DOM
      // inside the menu. This especially when the menu is not
      // rendered yet only after the menu is opened, React needs
      // to commit the changes to the DOM so that the elements are
      // visible and we can move the focus.
      setTimeout(function () {
        var list = (0, _shared.getFocusableList)(menuRef, UNSAFE_focusableElements);

        if (list.length) {
          list[0].focus();
        }
      }, 10);
    }
  }, /*#__PURE__*/_react.default.createElement(_collection.Collection, _extends({}, otherProps, {
    as: List,
    collection: collection,
    id: ariaControlsId,
    onKeyDown: function onKeyDown(event) {
      switch (event.key) {
        case _shared.Keys.Tab:
          {
            event.preventDefault();
            setActive(false);
            var list = Array.from(document.querySelectorAll(_shared.FOCUSABLE_ELEMENTS.join(',')));
            var position = list.indexOf(triggerRef.current);
            var nextElement = list[position + 1];

            if (nextElement) {
              nextElement.focus();
            }

            break;
          }

        default:
          navigationProps.onKeyDown(event);
          break;
      }
    },
    role: role
  }), children))))));
}

function FocusMenu(_ref4) {
  var children = _ref4.children,
      onRender = _ref4.onRender;
  (0, _react.useEffect)(function () {
    onRender();
  }, []);
  return children;
}

/**
 * Menu is an experimental component for the evolution of DropDown for the
 * upcoming major version 4.x. It includes features like OOTB virtualization
 * for groups.
 *
 * OBS: The component is not functional for all DropDown use cases,
 * this is a WIP.
 */
var Menu = /*#__PURE__*/_react.default.forwardRef(MenuInner);

exports.Menu = Menu;
Menu.displayName = 'Menu';