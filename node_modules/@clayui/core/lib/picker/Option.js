"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Option = Option;

var _icon = _interopRequireDefault(require("@clayui/icon"));

var _shared = require("@clayui/shared");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _context = require("./context");

var _excluded = ["aria-describedby", "aria-label", "aria-labelledby", "aria-posinset", "aria-setsize", "children", "disabled", "index", "keyValue", "textValue"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function Option(_ref) {
  var ariaDescribedby = _ref['aria-describedby'],
      ariaLabel = _ref['aria-label'],
      ariaLabelledby = _ref['aria-labelledby'],
      ariaPosInset = _ref['aria-posinset'],
      ariaSetSize = _ref['aria-setsize'],
      children = _ref.children,
      disabled = _ref.disabled,
      _index = _ref.index,
      keyValue = _ref.keyValue,
      textValue = _ref.textValue,
      otherProps = _objectWithoutProperties(_ref, _excluded);

  var _usePickerState = (0, _context.usePickerState)(),
      activeDescendant = _usePickerState.activeDescendant,
      isMobile = _usePickerState.isMobile,
      onActiveDescendant = _usePickerState.onActiveDescendant,
      onSelectionChange = _usePickerState.onSelectionChange,
      selectedKey = _usePickerState.selectedKey;

  var _useInteractionFocus = (0, _shared.useInteractionFocus)(),
      isFocusVisible = _useInteractionFocus.isFocusVisible;

  var hoverProps = (0, _shared.useHover)({
    disabled: disabled,
    onHover: (0, _react.useCallback)(function () {
      return onActiveDescendant(keyValue);
    }, [keyValue])
  });
  var isFocus = isFocusVisible();

  if (isMobile) {
    return /*#__PURE__*/_react.default.createElement("option", _extends({}, otherProps, {
      "aria-describedby": ariaDescribedby,
      disabled: disabled,
      value: keyValue
    }), typeof children === 'string' ? children : textValue);
  }

  return /*#__PURE__*/_react.default.createElement("li", {
    role: "presentation"
  }, /*#__PURE__*/_react.default.createElement("button", _extends({}, otherProps, hoverProps, {
    "aria-describedby": ariaDescribedby,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    "aria-posinset": ariaPosInset,
    "aria-selected": selectedKey === keyValue,
    "aria-setsize": ariaSetSize,
    className: (0, _classnames.default)('dropdown-item', {
      active: selectedKey === keyValue,
      focus: activeDescendant === keyValue && isFocus,
      hover: activeDescendant === keyValue && !isFocus
    }),
    disabled: disabled,
    id: String(keyValue),
    onClick: function onClick() {
      return onSelectionChange(keyValue);
    },
    role: "option",
    tabIndex: -1
  }), selectedKey === keyValue && /*#__PURE__*/_react.default.createElement("span", {
    className: "dropdown-item-indicator-start"
  }, /*#__PURE__*/_react.default.createElement(_icon.default, {
    symbol: "check-small"
  })), children));
}

Option.passthroughKey = true;
Option.displayName = 'Item';