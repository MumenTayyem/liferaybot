"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useUserInteractions = void 0;

var _shared = require("@clayui/shared");

var _react = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * SPDX-FileCopyrightText: Â© 2019 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: BSD-3-Clause
 */

/**
 * A hook that takes care of controlling click, keyup and keydown events
 * respectively close the modal after a click on the overlay, close the
 * modal by pressing the ESC key and control the focus within the Modal.
 */
var useUserInteractions = function useUserInteractions(modalElementRef, modalBodyElementRef, onClick, show, content) {
  var mouseEventTargetRef = _react.default.useRef(null);

  var getFocusableNodes = function getFocusableNodes() {
    if (modalBodyElementRef.current) {
      var nodes = modalBodyElementRef.current.querySelectorAll(_shared.FOCUSABLE_ELEMENTS);
      return Object.keys(nodes).map(function (key) {
        return nodes[key];
      });
    }

    return [];
  };

  var handleKeydown = function handleKeydown(event) {
    if (event.key === _shared.Keys.Esc && _shared.stack[_shared.stack.length - 1] === modalElementRef) {
      onClick();
    }

    if (event.key === _shared.Keys.Tab) {
      if (modalElementRef.current && event.target !== null && !modalElementRef.current.contains(event.target)) {
        modalBodyElementRef.current.focus();
      } else {
        var focusableNodes = getFocusableNodes();
        var focusedItemIndex = focusableNodes.indexOf(document.activeElement);

        if (event.shiftKey && focusedItemIndex === 0) {
          focusableNodes[focusableNodes.length - 1].focus();
          event.preventDefault();
        }

        if (!event.shiftKey && focusedItemIndex === focusableNodes.length - 1) {
          focusableNodes[0].focus();
          event.preventDefault();
        }
      }
    }
  };

  var handleDocumentMouseDown = function handleDocumentMouseDown(event) {
    // We keep the `event.target` to check later in the click event if
    // the target is the same, otherwise, we are assuming that the element
    // has been removed from the DOM.
    mouseEventTargetRef.current = event.target;
  };

  var handleDocumentMouseUp = function handleDocumentMouseUp(event) {
    if (event.defaultPrevented) {
      mouseEventTargetRef.current = null;
      return;
    }

    if (event.target === modalElementRef.current && mouseEventTargetRef.current === event.target) {
      mouseEventTargetRef.current = null;
      onClick();
    }

    mouseEventTargetRef.current = null;
  };
  /**
   * Just listen for keyup, keydown, and click when
   * changeAttachEvent is true.
   */


  (0, _react.useEffect)(function () {
    document.addEventListener('keydown', handleKeydown);
    document.addEventListener('mousedown', handleDocumentMouseDown);
    document.addEventListener('mouseup', handleDocumentMouseUp);
    return function () {
      document.removeEventListener('keydown', handleKeydown);
      document.removeEventListener('mousedown', handleDocumentMouseDown);
      document.removeEventListener('mouseup', handleDocumentMouseUp);
    };
  }, [show, content]);
};

exports.useUserInteractions = useUserInteractions;